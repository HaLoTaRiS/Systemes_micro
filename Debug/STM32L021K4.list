
STM32L021K4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003854  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dd8  08003dd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003dd8  08003dd8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dd8  08003dd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ddc  08003ddc  00013ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000070  08003e50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000204  20000304  08003e50  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009260  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a5  00000000  00000000  000292f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e6e6  00000000  00000000  0002c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cb7  00000000  00000000  0003ac6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004801f  00000000  00000000  00043925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008b944  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002400  00000000  00000000  0008b998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038fc 	.word	0x080038fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080038fc 	.word	0x080038fc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a04      	ldr	r2, [pc, #16]	; (8000254 <LL_ADC_Enable+0x20>)
 8000242:	4013      	ands	r3, r2
 8000244:	2201      	movs	r2, #1
 8000246:	431a      	orrs	r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	7fffffe8 	.word	0x7fffffe8

08000258 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <LL_ADC_REG_StartConversion+0x20>)
 8000266:	4013      	ands	r3, r2
 8000268:	2204      	movs	r2, #4
 800026a:	431a      	orrs	r2, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	b002      	add	sp, #8
 8000276:	bd80      	pop	{r7, pc}
 8000278:	7fffffe8 	.word	0x7fffffe8

0800027c <LL_ADC_REG_ReadConversionData8>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData8
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000288:	b2db      	uxtb	r3, r3
}
 800028a:	0018      	movs	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	b002      	add	sp, #8
 8000290:	bd80      	pop	{r7, pc}

08000292 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2204      	movs	r2, #4
 80002a0:	4013      	ands	r3, r2
 80002a2:	3b04      	subs	r3, #4
 80002a4:	425a      	negs	r2, r3
 80002a6:	4153      	adcs	r3, r2
 80002a8:	b2db      	uxtb	r3, r3
}
 80002aa:	0018      	movs	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b002      	add	sp, #8
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <AnalogInInit>:

#include "main.h"
#include "AnalogIn.h"
#include "stm32l0xx_ll_adc.h"

void AnalogInInit(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	// Active l'ADC
	LL_ADC_Enable(ADC1);
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <AnalogInInit+0x14>)
 80002ba:	0018      	movs	r0, r3
 80002bc:	f7ff ffba 	bl	8000234 <LL_ADC_Enable>
}
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	40012400 	.word	0x40012400

080002cc <AnalogInStartConversion>:

void AnalogInStartConversion(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	//Lance la conversion et reste tant que cela n'est pas fini
	LL_ADC_REG_StartConversion (ADC1);
 80002d0:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <AnalogInStartConversion+0x24>)
 80002d2:	0018      	movs	r0, r3
 80002d4:	f7ff ffc0 	bl	8000258 <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1) == 0 );
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <AnalogInStartConversion+0x24>)
 80002dc:	0018      	movs	r0, r3
 80002de:	f7ff ffd8 	bl	8000292 <LL_ADC_IsActiveFlag_EOC>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d0f9      	beq.n	80002da <AnalogInStartConversion+0xe>
}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	40012400 	.word	0x40012400

080002f4 <AnalogInGetValue>:

uint8_t AnalogInGetValue(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return LL_ADC_REG_ReadConversionData8(ADC1);
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <AnalogInGetValue+0x14>)
 80002fa:	0018      	movs	r0, r3
 80002fc:	f7ff ffbe 	bl	800027c <LL_ADC_REG_ReadConversionData8>
 8000300:	0003      	movs	r3, r0
}
 8000302:	0018      	movs	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40012400 	.word	0x40012400

0800030c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2240      	movs	r2, #64	; 0x40
 800031a:	431a      	orrs	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	601a      	str	r2, [r3, #0]
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b002      	add	sp, #8
 8000326:	bd80      	pop	{r7, pc}

08000328 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	2202      	movs	r2, #2
 8000336:	4013      	ands	r3, r2
 8000338:	2b02      	cmp	r3, #2
 800033a:	d101      	bne.n	8000340 <LL_SPI_IsActiveFlag_TXE+0x18>
 800033c:	2301      	movs	r3, #1
 800033e:	e000      	b.n	8000342 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000340:	2300      	movs	r3, #0
}
 8000342:	0018      	movs	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	b002      	add	sp, #8
 8000348:	bd80      	pop	{r7, pc}

0800034a <LL_SPI_TransmitData16>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	b084      	sub	sp, #16
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
 8000352:	000a      	movs	r2, r1
 8000354:	1cbb      	adds	r3, r7, #2
 8000356:	801a      	strh	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	330c      	adds	r3, #12
 800035c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	1cba      	adds	r2, r7, #2
 8000362:	8812      	ldrh	r2, [r2, #0]
 8000364:	801a      	strh	r2, [r3, #0]
#else
  SPIx->DR = TxData;
#endif /* __GNUC__ */
}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b004      	add	sp, #16
 800036c:	bd80      	pop	{r7, pc}

0800036e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	b082      	sub	sp, #8
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	683a      	ldr	r2, [r7, #0]
 800037c:	619a      	str	r2, [r3, #24]
}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	b002      	add	sp, #8
 8000384:	bd80      	pop	{r7, pc}

08000386 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000386:	b580      	push	{r7, lr}
 8000388:	b082      	sub	sp, #8
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
 800038e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	b002      	add	sp, #8
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <AnalogOutInit>:
#include "stm32l0xx_ll_spi.h"

// Initialise les données de la struture
DAC_t DacSPI = { 0, 1 , 1 , 1,  0 , 0 };

void AnalogOutInit(void){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	// Active la communication SPI1
	LL_SPI_Enable(SPI1);
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <AnalogOutInit+0x2c>)
 80003a6:	0018      	movs	r0, r3
 80003a8:	f7ff ffb0 	bl	800030c <LL_SPI_Enable>
	// Mise à 1 de nCS
	LL_GPIO_SetOutputPin(DAC_nCS_GPIO_Port, DAC_nCS_Pin);
 80003ac:	23a0      	movs	r3, #160	; 0xa0
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	2110      	movs	r1, #16
 80003b2:	0018      	movs	r0, r3
 80003b4:	f7ff ffdb 	bl	800036e <LL_GPIO_SetOutputPin>
	// Mise à 0 nDAC => Active le périphérique MCP4901
	LL_GPIO_ResetOutputPin(DAC_nLDAC_GPIO_Port, DAC_nLDAC_Pin);
 80003b8:	23a0      	movs	r3, #160	; 0xa0
 80003ba:	05db      	lsls	r3, r3, #23
 80003bc:	2108      	movs	r1, #8
 80003be:	0018      	movs	r0, r3
 80003c0:	f7ff ffe1 	bl	8000386 <LL_GPIO_ResetOutputPin>
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	40013000 	.word	0x40013000

080003d0 <AnalogOutConvert>:

void AnalogOutConvert(uint8_t value){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	0002      	movs	r2, r0
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	701a      	strb	r2, [r3, #0]

	// Décalage des bits pour la transmission
	uint16_t TxData = (DacSPI.DAC_Write << 15) + (DacSPI.DAC_Buf << 14) + (DacSPI.DAC_Ga << 13) + (DacSPI.DAC_SHDN << 12)  + (value << 4) ;
 80003dc:	4b20      	ldr	r3, [pc, #128]	; (8000460 <AnalogOutConvert+0x90>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	03db      	lsls	r3, r3, #15
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <AnalogOutConvert+0x90>)
 80003e8:	785b      	ldrb	r3, [r3, #1]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	039b      	lsls	r3, r3, #14
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	18d3      	adds	r3, r2, r3
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <AnalogOutConvert+0x90>)
 80003f6:	789b      	ldrb	r3, [r3, #2]
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	035b      	lsls	r3, r3, #13
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	18d3      	adds	r3, r2, r3
 8000400:	b29a      	uxth	r2, r3
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <AnalogOutConvert+0x90>)
 8000404:	78db      	ldrb	r3, [r3, #3]
 8000406:	b29b      	uxth	r3, r3
 8000408:	031b      	lsls	r3, r3, #12
 800040a:	b29b      	uxth	r3, r3
 800040c:	18d3      	adds	r3, r2, r3
 800040e:	b299      	uxth	r1, r3
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	b29b      	uxth	r3, r3
 8000416:	011b      	lsls	r3, r3, #4
 8000418:	b29a      	uxth	r2, r3
 800041a:	230e      	movs	r3, #14
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	188a      	adds	r2, r1, r2
 8000420:	801a      	strh	r2, [r3, #0]

	// Mise à 0 de nCS (Début de la communication SPI)
	LL_GPIO_ResetOutputPin(DAC_nCS_GPIO_Port, DAC_nCS_Pin);
 8000422:	23a0      	movs	r3, #160	; 0xa0
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	2110      	movs	r1, #16
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ffac 	bl	8000386 <LL_GPIO_ResetOutputPin>

	while(!LL_SPI_IsActiveFlag_TXE(SPI1));
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <AnalogOutConvert+0x94>)
 8000432:	0018      	movs	r0, r3
 8000434:	f7ff ff78 	bl	8000328 <LL_SPI_IsActiveFlag_TXE>
 8000438:	1e03      	subs	r3, r0, #0
 800043a:	d0f9      	beq.n	8000430 <AnalogOutConvert+0x60>
	LL_SPI_TransmitData16(SPI1, TxData);
 800043c:	230e      	movs	r3, #14
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	4a08      	ldr	r2, [pc, #32]	; (8000464 <AnalogOutConvert+0x94>)
 8000444:	0019      	movs	r1, r3
 8000446:	0010      	movs	r0, r2
 8000448:	f7ff ff7f 	bl	800034a <LL_SPI_TransmitData16>


	// Mise à 1 de nCS (Fin de la communication SPI)
	LL_GPIO_SetOutputPin(DAC_nCS_GPIO_Port, DAC_nCS_Pin);
 800044c:	23a0      	movs	r3, #160	; 0xa0
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	2110      	movs	r1, #16
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff ff8b 	bl	800036e <LL_GPIO_SetOutputPin>
}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	b004      	add	sp, #16
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000000 	.word	0x20000000
 8000464:	40013000 	.word	0x40013000

08000468 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2201      	movs	r2, #1
 8000476:	431a      	orrs	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}

08000484 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6a1a      	ldr	r2, [r3, #32]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	431a      	orrs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	621a      	str	r2, [r3, #32]
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b082      	sub	sp, #8
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
 80004aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	683a      	ldr	r2, [r7, #0]
 80004b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LedStart>:

// Initialisation des données de la structure
Led_t ledStatus = { 0 , 0 };

// Fonction pour démarrer le timer
void LedStart(void){
 80004ba:	b580      	push	{r7, lr}
 80004bc:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM2);
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	0018      	movs	r0, r3
 80004c4:	f7ff ffd0 	bl	8000468 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	2101      	movs	r1, #1
 80004ce:	0018      	movs	r0, r3
 80004d0:	f7ff ffd8 	bl	8000484 <LL_TIM_CC_EnableChannel>
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <LedSetValue>:

// Configure le rapport cyclique
void LedSetValue(uint8_t val){
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	0002      	movs	r2, r0
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	701a      	strb	r2, [r3, #0]
	LL_TIM_OC_SetCompareCH1(TIM2, val);
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	2380      	movs	r3, #128	; 0x80
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f7ff ffd6 	bl	80004a2 <LL_TIM_OC_SetCompareCH1>
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <LedPulse>:

// Gere l'intensité
void LedPulse(void){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	//augmentation d'intensité led
	if (ledStatus.updown == 0) {
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <LedPulse+0x54>)
 8000506:	785b      	ldrb	r3, [r3, #1]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d106      	bne.n	800051a <LedPulse+0x1a>
		ledStatus.luminosite++;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <LedPulse+0x54>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <LedPulse+0x54>)
 8000516:	701a      	strb	r2, [r3, #0]
 8000518:	e005      	b.n	8000526 <LedPulse+0x26>
	}
	// Diminution de l'intensité
	else {
		ledStatus.luminosite--;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <LedPulse+0x54>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <LedPulse+0x54>)
 8000524:	701a      	strb	r2, [r3, #0]
	}

	// En mode décrémente
	if (ledStatus.luminosite == 255){
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <LedPulse+0x54>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2bff      	cmp	r3, #255	; 0xff
 800052c:	d102      	bne.n	8000534 <LedPulse+0x34>
		ledStatus.updown = 1;
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <LedPulse+0x54>)
 8000530:	2201      	movs	r2, #1
 8000532:	705a      	strb	r2, [r3, #1]
	}

	// En mode incrémente
	if (ledStatus.luminosite == 0){
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <LedPulse+0x54>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <LedPulse+0x42>
		ledStatus.updown = 0;
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <LedPulse+0x54>)
 800053e:	2200      	movs	r2, #0
 8000540:	705a      	strb	r2, [r3, #1]
	}
	LedSetValue(ledStatus.luminosite);
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <LedPulse+0x54>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff ffc7 	bl	80004da <LedSetValue>
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	2000008c 	.word	0x2000008c

08000558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	0002      	movs	r2, r0
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b7f      	cmp	r3, #127	; 0x7f
 800056a:	d809      	bhi.n	8000580 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	001a      	movs	r2, r3
 8000572:	231f      	movs	r3, #31
 8000574:	401a      	ands	r2, r3
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <__NVIC_EnableIRQ+0x30>)
 8000578:	2101      	movs	r1, #1
 800057a:	4091      	lsls	r1, r2
 800057c:	000a      	movs	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
  }
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b002      	add	sp, #8
 8000586:	bd80      	pop	{r7, pc}
 8000588:	e000e100 	.word	0xe000e100

0800058c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	0002      	movs	r2, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b7f      	cmp	r3, #127	; 0x7f
 80005a0:	d828      	bhi.n	80005f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005a2:	4a2f      	ldr	r2, [pc, #188]	; (8000660 <__NVIC_SetPriority+0xd4>)
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	089b      	lsrs	r3, r3, #2
 80005ac:	33c0      	adds	r3, #192	; 0xc0
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	589b      	ldr	r3, [r3, r2]
 80005b2:	1dfa      	adds	r2, r7, #7
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	0011      	movs	r1, r2
 80005b8:	2203      	movs	r2, #3
 80005ba:	400a      	ands	r2, r1
 80005bc:	00d2      	lsls	r2, r2, #3
 80005be:	21ff      	movs	r1, #255	; 0xff
 80005c0:	4091      	lsls	r1, r2
 80005c2:	000a      	movs	r2, r1
 80005c4:	43d2      	mvns	r2, r2
 80005c6:	401a      	ands	r2, r3
 80005c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	019b      	lsls	r3, r3, #6
 80005ce:	22ff      	movs	r2, #255	; 0xff
 80005d0:	401a      	ands	r2, r3
 80005d2:	1dfb      	adds	r3, r7, #7
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	0018      	movs	r0, r3
 80005d8:	2303      	movs	r3, #3
 80005da:	4003      	ands	r3, r0
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005e0:	481f      	ldr	r0, [pc, #124]	; (8000660 <__NVIC_SetPriority+0xd4>)
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	430a      	orrs	r2, r1
 80005ec:	33c0      	adds	r3, #192	; 0xc0
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005f2:	e031      	b.n	8000658 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f4:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <__NVIC_SetPriority+0xd8>)
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	0019      	movs	r1, r3
 80005fc:	230f      	movs	r3, #15
 80005fe:	400b      	ands	r3, r1
 8000600:	3b08      	subs	r3, #8
 8000602:	089b      	lsrs	r3, r3, #2
 8000604:	3306      	adds	r3, #6
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	18d3      	adds	r3, r2, r3
 800060a:	3304      	adds	r3, #4
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1dfa      	adds	r2, r7, #7
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	0011      	movs	r1, r2
 8000614:	2203      	movs	r2, #3
 8000616:	400a      	ands	r2, r1
 8000618:	00d2      	lsls	r2, r2, #3
 800061a:	21ff      	movs	r1, #255	; 0xff
 800061c:	4091      	lsls	r1, r2
 800061e:	000a      	movs	r2, r1
 8000620:	43d2      	mvns	r2, r2
 8000622:	401a      	ands	r2, r3
 8000624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	019b      	lsls	r3, r3, #6
 800062a:	22ff      	movs	r2, #255	; 0xff
 800062c:	401a      	ands	r2, r3
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	0018      	movs	r0, r3
 8000634:	2303      	movs	r3, #3
 8000636:	4003      	ands	r3, r0
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <__NVIC_SetPriority+0xd8>)
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	001c      	movs	r4, r3
 8000644:	230f      	movs	r3, #15
 8000646:	4023      	ands	r3, r4
 8000648:	3b08      	subs	r3, #8
 800064a:	089b      	lsrs	r3, r3, #2
 800064c:	430a      	orrs	r2, r1
 800064e:	3306      	adds	r3, #6
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	18c3      	adds	r3, r0, r3
 8000654:	3304      	adds	r3, #4
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b003      	add	sp, #12
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	e000e100 	.word	0xe000e100
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <LL_ADC_SetCommonFrequencyMode>:
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000678:	401a      	ands	r2, r3
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	431a      	orrs	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	fdffffff 	.word	0xfdffffff

08000690 <LL_ADC_SetSamplingTimeCommonChannels>:
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	2207      	movs	r2, #7
 80006a0:	4393      	bics	r3, r2
 80006a2:	001a      	movs	r2, r3
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	431a      	orrs	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	615a      	str	r2, [r3, #20]
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <LL_ADC_REG_SetSequencerScanDirection>:
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	2204      	movs	r2, #4
 80006c4:	4393      	bics	r3, r2
 80006c6:	001a      	movs	r2, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	431a      	orrs	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	60da      	str	r2, [r3, #12]
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LL_ADC_REG_SetSequencerChAdd>:
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	035b      	lsls	r3, r3, #13
 80006ea:	0b5b      	lsrs	r3, r3, #13
 80006ec:	431a      	orrs	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b002      	add	sp, #8
 80006f8:	bd80      	pop	{r7, pc}

080006fa <LL_ADC_SetOverSamplingScope>:
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	691b      	ldr	r3, [r3, #16]
 8000708:	2201      	movs	r2, #1
 800070a:	4393      	bics	r3, r2
 800070c:	001a      	movs	r2, r3
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	431a      	orrs	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	611a      	str	r2, [r3, #16]
}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <LL_ADC_EnableInternalRegulator>:
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	4a05      	ldr	r2, [pc, #20]	; (8000744 <LL_ADC_EnableInternalRegulator+0x24>)
 800072e:	4013      	ands	r3, r2
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	0552      	lsls	r2, r2, #21
 8000734:	431a      	orrs	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	609a      	str	r2, [r3, #8]
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	6fffffe8 	.word	0x6fffffe8

08000748 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	2204      	movs	r2, #4
 8000756:	4393      	bics	r3, r2
 8000758:	001a      	movs	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	605a      	str	r2, [r3, #4]
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}

08000766 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	2208      	movs	r2, #8
 8000774:	4393      	bics	r3, r2
 8000776:	001a      	movs	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	605a      	str	r2, [r3, #4]
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b002      	add	sp, #8
 8000782:	bd80      	pop	{r7, pc}

08000784 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <LL_RCC_HSI_Enable+0x18>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <LL_RCC_HSI_Enable+0x18>)
 800078e:	2101      	movs	r1, #1
 8000790:	430a      	orrs	r2, r1
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000

080007a0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <LL_RCC_HSI_IsReady+0x1c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2204      	movs	r2, #4
 80007aa:	4013      	ands	r3, r2
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d101      	bne.n	80007b4 <LL_RCC_HSI_IsReady+0x14>
 80007b0:	2301      	movs	r3, #1
 80007b2:	e000      	b.n	80007b6 <LL_RCC_HSI_IsReady+0x16>
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	0018      	movs	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000

080007c0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007ce:	4013      	ands	r3, r2
 80007d0:	0019      	movs	r1, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	021a      	lsls	r2, r3, #8
 80007d6:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80007d8:	430a      	orrs	r2, r1
 80007da:	605a      	str	r2, [r3, #4]
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	ffffe0ff 	.word	0xffffe0ff

080007ec <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <LL_RCC_SetSysClkSource+0x24>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	2203      	movs	r2, #3
 80007fa:	4393      	bics	r3, r2
 80007fc:	0019      	movs	r1, r3
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <LL_RCC_SetSysClkSource+0x24>)
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	430a      	orrs	r2, r1
 8000804:	60da      	str	r2, [r3, #12]
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40021000 	.word	0x40021000

08000814 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <LL_RCC_GetSysClkSource+0x14>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	220c      	movs	r2, #12
 800081e:	4013      	ands	r3, r2
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	40021000 	.word	0x40021000

0800082c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <LL_RCC_SetAHBPrescaler+0x24>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	22f0      	movs	r2, #240	; 0xf0
 800083a:	4393      	bics	r3, r2
 800083c:	0019      	movs	r1, r3
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <LL_RCC_SetAHBPrescaler+0x24>)
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	430a      	orrs	r2, r1
 8000844:	60da      	str	r2, [r3, #12]
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	40021000 	.word	0x40021000

08000854 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <LL_RCC_SetAPB1Prescaler+0x24>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000862:	4013      	ands	r3, r2
 8000864:	0019      	movs	r1, r3
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	430a      	orrs	r2, r1
 800086c:	60da      	str	r2, [r3, #12]
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	40021000 	.word	0x40021000
 800087c:	fffff8ff 	.word	0xfffff8ff

08000880 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <LL_RCC_SetAPB2Prescaler+0x28>)
 800088e:	4013      	ands	r3, r2
 8000890:	0019      	movs	r1, r3
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	430a      	orrs	r2, r1
 8000898:	60da      	str	r2, [r3, #12]
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	40021000 	.word	0x40021000
 80008a8:	ffffc7ff 	.word	0xffffc7ff

080008ac <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <LL_RCC_SetUSARTClockSource+0x2c>)
 80008b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	0c12      	lsrs	r2, r2, #16
 80008bc:	43d2      	mvns	r2, r2
 80008be:	401a      	ands	r2, r3
 80008c0:	0011      	movs	r1, r2
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	041b      	lsls	r3, r3, #16
 80008c6:	0c1a      	lsrs	r2, r3, #16
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <LL_RCC_SetUSARTClockSource+0x2c>)
 80008ca:	430a      	orrs	r2, r1
 80008cc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40021000 	.word	0x40021000

080008dc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <LL_RCC_PLL_Enable+0x18>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <LL_RCC_PLL_Enable+0x18>)
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0449      	lsls	r1, r1, #17
 80008ea:	430a      	orrs	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000

080008f8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <LL_RCC_PLL_IsReady+0x24>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	049b      	lsls	r3, r3, #18
 8000904:	401a      	ands	r2, r3
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	049b      	lsls	r3, r3, #18
 800090a:	429a      	cmp	r2, r3
 800090c:	d101      	bne.n	8000912 <LL_RCC_PLL_IsReady+0x1a>
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <LL_RCC_PLL_IsReady+0x1c>
 8000912:	2300      	movs	r3, #0
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	40021000 	.word	0x40021000

08000920 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	4a08      	ldr	r2, [pc, #32]	; (8000954 <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 8000932:	4013      	ands	r3, r2
 8000934:	0019      	movs	r1, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	431a      	orrs	r2, r3
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000942:	430a      	orrs	r2, r1
 8000944:	60da      	str	r2, [r3, #12]
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b004      	add	sp, #16
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	40021000 	.word	0x40021000
 8000954:	ff02ffff 	.word	0xff02ffff

08000958 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <LL_APB1_GRP1_EnableClock+0x28>)
 8000962:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <LL_APB1_GRP1_EnableClock+0x28>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	430a      	orrs	r2, r1
 800096a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <LL_APB1_GRP1_EnableClock+0x28>)
 800096e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4013      	ands	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b004      	add	sp, #16
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021000 	.word	0x40021000

08000984 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <LL_APB2_GRP1_EnableClock+0x28>)
 800098e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <LL_APB2_GRP1_EnableClock+0x28>)
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	430a      	orrs	r2, r1
 8000996:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <LL_APB2_GRP1_EnableClock+0x28>)
 800099a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	4013      	ands	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40021000 	.word	0x40021000

080009b0 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80009ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	430a      	orrs	r2, r1
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80009c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b004      	add	sp, #16
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000

080009dc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <LL_FLASH_SetLatency+0x24>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2201      	movs	r2, #1
 80009ea:	4393      	bics	r3, r2
 80009ec:	0019      	movs	r1, r3
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <LL_FLASH_SetLatency+0x24>)
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b002      	add	sp, #8
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40022000 	.word	0x40022000

08000a04 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <LL_FLASH_GetLatency+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4013      	ands	r3, r2
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40022000 	.word	0x40022000

08000a1c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40007000 	.word	0x40007000
 8000a44:	ffffe7ff 	.word	0xffffe7ff

08000a48 <LL_SPI_SetStandard>:
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2210      	movs	r2, #16
 8000a58:	4393      	bics	r3, r2
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	605a      	str	r2, [r3, #4]
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <LL_TIM_EnableARRPreload>:
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <LL_TIM_DisableARRPreload>:
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	4393      	bics	r3, r2
 8000a98:	001a      	movs	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	601a      	str	r2, [r3, #0]
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <LL_TIM_OC_DisableFast>:
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d00d      	beq.n	8000ad4 <LL_TIM_OC_DisableFast+0x2c>
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	2b10      	cmp	r3, #16
 8000abc:	d008      	beq.n	8000ad0 <LL_TIM_OC_DisableFast+0x28>
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d101      	bne.n	8000acc <LL_TIM_OC_DisableFast+0x24>
 8000ac8:	2304      	movs	r3, #4
 8000aca:	e004      	b.n	8000ad6 <LL_TIM_OC_DisableFast+0x2e>
 8000acc:	2306      	movs	r3, #6
 8000ace:	e002      	b.n	8000ad6 <LL_TIM_OC_DisableFast+0x2e>
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	e000      	b.n	8000ad6 <LL_TIM_OC_DisableFast+0x2e>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	183a      	adds	r2, r7, r0
 8000ada:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3318      	adds	r3, #24
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	183b      	adds	r3, r7, r0
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LL_TIM_OC_DisableFast+0x68>)
 8000ae8:	5cd3      	ldrb	r3, [r2, r3]
 8000aea:	18cb      	adds	r3, r1, r3
 8000aec:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	183a      	adds	r2, r7, r0
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	4907      	ldr	r1, [pc, #28]	; (8000b14 <LL_TIM_OC_DisableFast+0x6c>)
 8000af8:	5c8a      	ldrb	r2, [r1, r2]
 8000afa:	0011      	movs	r1, r2
 8000afc:	2204      	movs	r2, #4
 8000afe:	408a      	lsls	r2, r1
 8000b00:	43d2      	mvns	r2, r2
 8000b02:	401a      	ands	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	601a      	str	r2, [r3, #0]
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b004      	add	sp, #16
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	08003c70 	.word	0x08003c70
 8000b14:	08003c78 	.word	0x08003c78

08000b18 <LL_TIM_OC_EnablePreload>:
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d00d      	beq.n	8000b44 <LL_TIM_OC_EnablePreload+0x2c>
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	2b10      	cmp	r3, #16
 8000b2c:	d008      	beq.n	8000b40 <LL_TIM_OC_EnablePreload+0x28>
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d101      	bne.n	8000b3c <LL_TIM_OC_EnablePreload+0x24>
 8000b38:	2304      	movs	r3, #4
 8000b3a:	e004      	b.n	8000b46 <LL_TIM_OC_EnablePreload+0x2e>
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	e002      	b.n	8000b46 <LL_TIM_OC_EnablePreload+0x2e>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e000      	b.n	8000b46 <LL_TIM_OC_EnablePreload+0x2e>
 8000b44:	2300      	movs	r3, #0
 8000b46:	200f      	movs	r0, #15
 8000b48:	183a      	adds	r2, r7, r0
 8000b4a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3318      	adds	r3, #24
 8000b50:	0019      	movs	r1, r3
 8000b52:	183b      	adds	r3, r7, r0
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LL_TIM_OC_EnablePreload+0x68>)
 8000b58:	5cd3      	ldrb	r3, [r2, r3]
 8000b5a:	18cb      	adds	r3, r1, r3
 8000b5c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	183b      	adds	r3, r7, r0
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4907      	ldr	r1, [pc, #28]	; (8000b84 <LL_TIM_OC_EnablePreload+0x6c>)
 8000b68:	5ccb      	ldrb	r3, [r1, r3]
 8000b6a:	0019      	movs	r1, r3
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	408b      	lsls	r3, r1
 8000b70:	431a      	orrs	r2, r3
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	08003c70 	.word	0x08003c70
 8000b84:	08003c78 	.word	0x08003c78

08000b88 <LL_TIM_OC_DisablePreload>:
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d00d      	beq.n	8000bb4 <LL_TIM_OC_DisablePreload+0x2c>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	2b10      	cmp	r3, #16
 8000b9c:	d008      	beq.n	8000bb0 <LL_TIM_OC_DisablePreload+0x28>
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d101      	bne.n	8000bac <LL_TIM_OC_DisablePreload+0x24>
 8000ba8:	2304      	movs	r3, #4
 8000baa:	e004      	b.n	8000bb6 <LL_TIM_OC_DisablePreload+0x2e>
 8000bac:	2306      	movs	r3, #6
 8000bae:	e002      	b.n	8000bb6 <LL_TIM_OC_DisablePreload+0x2e>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e000      	b.n	8000bb6 <LL_TIM_OC_DisablePreload+0x2e>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	183a      	adds	r2, r7, r0
 8000bba:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3318      	adds	r3, #24
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	183b      	adds	r3, r7, r0
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <LL_TIM_OC_DisablePreload+0x68>)
 8000bc8:	5cd3      	ldrb	r3, [r2, r3]
 8000bca:	18cb      	adds	r3, r1, r3
 8000bcc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	183a      	adds	r2, r7, r0
 8000bd4:	7812      	ldrb	r2, [r2, #0]
 8000bd6:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <LL_TIM_OC_DisablePreload+0x6c>)
 8000bd8:	5c8a      	ldrb	r2, [r1, r2]
 8000bda:	0011      	movs	r1, r2
 8000bdc:	2208      	movs	r2, #8
 8000bde:	408a      	lsls	r2, r1
 8000be0:	43d2      	mvns	r2, r2
 8000be2:	401a      	ands	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b004      	add	sp, #16
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08003c70 	.word	0x08003c70
 8000bf4:	08003c78 	.word	0x08003c78

08000bf8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <LL_TIM_SetClockSource+0x24>)
 8000c08:	401a      	ands	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	609a      	str	r2, [r3, #8]
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	ffffbff8 	.word	0xffffbff8

08000c20 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2270      	movs	r2, #112	; 0x70
 8000c30:	4393      	bics	r3, r2
 8000c32:	001a      	movs	r2, r3
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	431a      	orrs	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	605a      	str	r2, [r3, #4]
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	4393      	bics	r3, r2
 8000c54:	001a      	movs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	609a      	str	r2, [r3, #8]
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	431a      	orrs	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	601a      	str	r2, [r3, #0]
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <LL_USART_ConfigAsyncMode+0x2c>)
 8000c8e:	401a      	ands	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	222a      	movs	r2, #42	; 0x2a
 8000c9a:	4393      	bics	r3, r2
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	ffffb7ff 	.word	0xffffb7ff

08000cb0 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8000cbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8000cbe:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f383 8810 	msr	PRIMASK, r3
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	f383 8810 	msr	PRIMASK, r3
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b006      	add	sp, #24
 8000cec:	bd80      	pop	{r7, pc}

08000cee <LL_GPIO_ResetOutputPin>:
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff fe39 	bl	8000984 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	055b      	lsls	r3, r3, #21
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fe1e 	bl	8000958 <LL_APB1_GRP1_EnableClock>

	/* System interrupt init*/
	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, 3);
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	425b      	negs	r3, r3
 8000d20:	2103      	movs	r1, #3
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fc32 	bl	800058c <__NVIC_SetPriority>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d28:	f000 f842 	bl	8000db0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d2c:	f000 fb0c 	bl	8001348 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000d30:	f000 fa8c 	bl	800124c <MX_USART2_UART_Init>
	MX_ADC_Init();
 8000d34:	f000 f88c 	bl	8000e50 <MX_ADC_Init>
	MX_SPI1_Init();
 8000d38:	f000 f93a 	bl	8000fb0 <MX_SPI1_Init>
	MX_TIM2_Init();
 8000d3c:	f000 f9b8 	bl	80010b0 <MX_TIM2_Init>
	MX_TIM21_Init();
 8000d40:	f000 fa44 	bl	80011cc <MX_TIM21_Init>
	/* USER CODE BEGIN 2 */

	/************** Initialisation **************/

	//Questionn 3.5 Amélioration : Activation interrupt UART
	LL_USART_EnableIT_RXNE(USART2);
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <main+0x94>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ffb2 	bl	8000cb0 <LL_USART_EnableIT_RXNE>
	// Question 3.5 Shell
	ShellInit(&hShell, &SerialTransmit);
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <main+0x98>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <main+0x9c>)
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 fe1a 	bl	800198c <ShellInit>
	// Question 3.2 InitLed()
	LedStart();
 8000d58:	f7ff fbaf 	bl	80004ba <LedStart>
	// Question 3.3 Led Timer
	TimeBaseStartIT();
 8000d5c:	f001 f9a6 	bl	80020ac <TimeBaseStartIT>
	// Question 3.6
	AnalogOutInit();
 8000d60:	f7ff fb1e 	bl	80003a0 <AnalogOutInit>
	// Question 3.7
	AnalogInInit();
 8000d64:	f7ff faa6 	bl	80002b4 <AnalogInInit>
		// 3.5 : Code pour le shell : // (supprimé pour retirer le polling).
		//		char c = SerialReceiveByte();
		//		ShellProcess(&hShell, c);

		// Compteur pour jouer sur l'échantillon du signal -> Visible sur l'oscillo
		if (count>32){ // Valeur à modifier pour modifier l'échantillon.
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <main+0xa0>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b20      	cmp	r3, #32
 8000d6e:	d9fb      	bls.n	8000d68 <main+0x60>
			// Question 3.6 Génération du signal triangle
			//AnalogOutPulse();

			// Question 3.7 : By pass avec
			// Génération dy bypass
			valeur.ADC_IN = AnalogInGetValue();
 8000d70:	f7ff fac0 	bl	80002f4 <AnalogInGetValue>
 8000d74:	0003      	movs	r3, r0
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <main+0xa4>)
 8000d7a:	801a      	strh	r2, [r3, #0]
			// Question 3.8 filtre RC
			// uint16_t RCFilterUpdate(hRCFilter_t * hRCFilter, uint16_t input)
			valeur.DAC_OUT = valeur.ADC_IN;
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <main+0xa4>)
 8000d7e:	881a      	ldrh	r2, [r3, #0]
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <main+0xa4>)
 8000d82:	805a      	strh	r2, [r3, #2]
			AnalogOutConvert(valeur.DAC_OUT);
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <main+0xa4>)
 8000d86:	885b      	ldrh	r3, [r3, #2]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fb20 	bl	80003d0 <AnalogOutConvert>
			AnalogInStartConversion();
 8000d90:	f7ff fa9c 	bl	80002cc <AnalogInStartConversion>
			count = 0;
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <main+0xa0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
		if (count>32){ // Valeur à modifier pour modifier l'échantillon.
 8000d9a:	e7e5      	b.n	8000d68 <main+0x60>
 8000d9c:	40004400 	.word	0x40004400
 8000da0:	08001455 	.word	0x08001455
 8000da4:	200000b4 	.word	0x200000b4
 8000da8:	20000094 	.word	0x20000094
 8000dac:	20000090 	.word	0x20000090

08000db0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fe11 	bl	80009dc <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	f7ff fe22 	bl	8000a04 <LL_FLASH_GetLatency>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d1fa      	bne.n	8000dbc <SystemClock_Config+0xc>
	{
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff fe26 	bl	8000a1c <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_HSI_Enable();
 8000dd0:	f7ff fcd8 	bl	8000784 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1)
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	f7ff fce3 	bl	80007a0 <LL_RCC_HSI_IsReady>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d1fa      	bne.n	8000dd6 <SystemClock_Config+0x26>
	{

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8000de0:	2010      	movs	r0, #16
 8000de2:	f7ff fced 	bl	80007c0 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_4, LL_RCC_PLL_DIV_2);
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	03da      	lsls	r2, r3, #15
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	02db      	lsls	r3, r3, #11
 8000dee:	0019      	movs	r1, r3
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fd95 	bl	8000920 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8000df6:	f7ff fd71 	bl	80008dc <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1)
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	f7ff fd7c 	bl	80008f8 <LL_RCC_PLL_IsReady>
 8000e00:	0003      	movs	r3, r0
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d1fa      	bne.n	8000dfc <SystemClock_Config+0x4c>
	{

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff fd10 	bl	800082c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fd21 	bl	8000854 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff fd34 	bl	8000880 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f7ff fce7 	bl	80007ec <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	f7ff fcf8 	bl	8000814 <LL_RCC_GetSysClkSource>
 8000e24:	0003      	movs	r3, r0
 8000e26:	2b0c      	cmp	r3, #12
 8000e28:	d1fa      	bne.n	8000e20 <SystemClock_Config+0x70>
	{

	}

	LL_Init1msTick(32000000);
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <SystemClock_Config+0x9c>)
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f002 f83b 	bl	8002ea8 <LL_Init1msTick>

	LL_SetSystemCoreClock(32000000);
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemClock_Config+0x9c>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f002 f847 	bl	8002ec8 <LL_SetSystemCoreClock>
	LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000e3a:	23c0      	movs	r3, #192	; 0xc0
 8000e3c:	031b      	lsls	r3, r3, #12
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff fd34 	bl	80008ac <LL_RCC_SetUSARTClockSource>
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	01e84800 	.word	0x01e84800

08000e50 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b090      	sub	sp, #64	; 0x40
 8000e54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000e56:	2428      	movs	r4, #40	; 0x28
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	2314      	movs	r3, #20
 8000e5e:	001a      	movs	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	f002 f86f 	bl	8002f44 <memset>
	LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000e66:	2518      	movs	r5, #24
 8000e68:	197b      	adds	r3, r7, r5
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	f002 f867 	bl	8002f44 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	003b      	movs	r3, r7
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2318      	movs	r3, #24
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f002 f860 	bl	8002f44 <memset>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff fd7b 	bl	8000984 <LL_APB2_GRP1_EnableClock>

	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f7ff fd8e 	bl	80009b0 <LL_IOP_GRP1_EnableClock>
	/**ADC GPIO Configuration
  PA1   ------> ADC_IN1
	 */
	GPIO_InitStruct.Pin = ADC_IN_Pin;
 8000e94:	003b      	movs	r3, r7
 8000e96:	2202      	movs	r2, #2
 8000e98:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea0:	003b      	movs	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	003a      	movs	r2, r7
 8000ea8:	23a0      	movs	r3, #160	; 0xa0
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	0011      	movs	r1, r2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f001 fa83 	bl	80023ba <LL_GPIO_Init>

	/* ADC interrupt Init */
	NVIC_SetPriority(ADC1_COMP_IRQn, 0);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	200c      	movs	r0, #12
 8000eb8:	f7ff fb68 	bl	800058c <__NVIC_SetPriority>
	NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000ebc:	200c      	movs	r0, #12
 8000ebe:	f7ff fb4b 	bl	8000558 <__NVIC_EnableIRQ>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 8000ec2:	4a36      	ldr	r2, [pc, #216]	; (8000f9c <MX_ADC_Init+0x14c>)
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <MX_ADC_Init+0x150>)
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff fc05 	bl	80006d8 <LL_ADC_REG_SetSequencerChAdd>
	/** Common config
	 */
	ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
	ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
	ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	0192      	lsls	r2, r2, #6
 8000ee0:	609a      	str	r2, [r3, #8]
	ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
	ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
	LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	4a2b      	ldr	r2, [pc, #172]	; (8000fa0 <MX_ADC_Init+0x150>)
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	f001 f975 	bl	80021e4 <LL_ADC_REG_Init>
	LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_ADC_Init+0x150>)
 8000efc:	2103      	movs	r1, #3
 8000efe:	0018      	movs	r0, r3
 8000f00:	f7ff fbc6 	bl	8000690 <LL_ADC_SetSamplingTimeCommonChannels>
	LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000f04:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_ADC_Init+0x150>)
 8000f06:	2100      	movs	r1, #0
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff fbf6 	bl	80006fa <LL_ADC_SetOverSamplingScope>
	LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_ADC_Init+0x150>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff fbce 	bl	80006b4 <LL_ADC_REG_SetSequencerScanDirection>
	LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_ADC_Init+0x154>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff fba3 	bl	8000668 <LL_ADC_SetCommonFrequencyMode>
	LL_ADC_DisableIT_EOC(ADC1);
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_ADC_Init+0x150>)
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff fc0f 	bl	8000748 <LL_ADC_DisableIT_EOC>
	LL_ADC_DisableIT_EOS(ADC1);
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <MX_ADC_Init+0x150>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff fc1a 	bl	8000766 <LL_ADC_DisableIT_EOS>
	ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f32:	197b      	adds	r3, r7, r5
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	05d2      	lsls	r2, r2, #23
 8000f38:	601a      	str	r2, [r3, #0]
	ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_8B;
 8000f3a:	197b      	adds	r3, r7, r5
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	605a      	str	r2, [r3, #4]
	ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000f40:	197b      	adds	r3, r7, r5
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
	ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000f46:	197b      	adds	r3, r7, r5
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
	LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000f4c:	197b      	adds	r3, r7, r5
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <MX_ADC_Init+0x150>)
 8000f50:	0019      	movs	r1, r3
 8000f52:	0010      	movs	r0, r2
 8000f54:	f001 f910 	bl	8002178 <LL_ADC_Init>

	/* Enable ADC internal voltage regulator */
	LL_ADC_EnableInternalRegulator(ADC1);
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_ADC_Init+0x150>)
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff fbe0 	bl	8000720 <LL_ADC_EnableInternalRegulator>
	/* Note: Variable divided by 2 to compensate partially */
	/* CPU processing cycles (depends on compilation optimization). */
	/* Note: If system core clock frequency is below 200kHz, wait time */
	/* is only a few CPU processing cycles. */
	uint32_t wait_loop_index;
	wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_ADC_Init+0x158>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4911      	ldr	r1, [pc, #68]	; (8000fac <MX_ADC_Init+0x15c>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff f8d8 	bl	800011c <__udivsi3>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	001a      	movs	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	189b      	adds	r3, r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	210a      	movs	r1, #10
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff f8ce 	bl	800011c <__udivsi3>
 8000f80:	0003      	movs	r3, r0
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(wait_loop_index != 0)
 8000f84:	e002      	b.n	8000f8c <MX_ADC_Init+0x13c>
	{
		wait_loop_index--;
 8000f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(wait_loop_index != 0)
 8000f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f9      	bne.n	8000f86 <MX_ADC_Init+0x136>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b010      	add	sp, #64	; 0x40
 8000f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f9c:	04000002 	.word	0x04000002
 8000fa0:	40012400 	.word	0x40012400
 8000fa4:	40012708 	.word	0x40012708
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	00030d40 	.word	0x00030d40

08000fb0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b091      	sub	sp, #68	; 0x44
 8000fb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 0 */

	/* USER CODE END SPI1_Init 0 */

	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000fb6:	2418      	movs	r4, #24
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2328      	movs	r3, #40	; 0x28
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f001 ffbf 	bl	8002f44 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	0018      	movs	r0, r3
 8000fca:	2318      	movs	r3, #24
 8000fcc:	001a      	movs	r2, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	f001 ffb8 	bl	8002f44 <memset>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	015b      	lsls	r3, r3, #5
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff fcd3 	bl	8000984 <LL_APB2_GRP1_EnableClock>

	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff fce6 	bl	80009b0 <LL_IOP_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000fe4:	003b      	movs	r3, r7
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fea:	003b      	movs	r3, r7
 8000fec:	2202      	movs	r2, #2
 8000fee:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	003b      	movs	r3, r7
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ff6:	003b      	movs	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001002:	003b      	movs	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	003a      	movs	r2, r7
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	0011      	movs	r1, r2
 8001010:	0018      	movs	r0, r3
 8001012:	f001 f9d2 	bl	80023ba <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001016:	003b      	movs	r3, r7
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800101c:	003b      	movs	r3, r7
 800101e:	2202      	movs	r2, #2
 8001020:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	003b      	movs	r3, r7
 8001024:	2203      	movs	r2, #3
 8001026:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001028:	003b      	movs	r3, r7
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800102e:	003b      	movs	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001034:	003b      	movs	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	003a      	movs	r2, r7
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f001 f9b9 	bl	80023ba <LL_GPIO_Init>

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001048:	0021      	movs	r1, r4
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2282      	movs	r2, #130	; 0x82
 8001054:	0052      	lsls	r2, r2, #1
 8001056:	605a      	str	r2, [r3, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2280      	movs	r2, #128	; 0x80
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	609a      	str	r2, [r3, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	0092      	lsls	r2, r2, #2
 8001072:	615a      	str	r2, [r3, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2200      	movs	r2, #0
 800107e:	61da      	str	r2, [r3, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2200      	movs	r2, #0
 8001084:	621a      	str	r2, [r3, #32]
	SPI_InitStruct.CRCPoly = 7;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2207      	movs	r2, #7
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
	LL_SPI_Init(SPI1, &SPI_InitStruct);
 800108c:	187b      	adds	r3, r7, r1
 800108e:	4a07      	ldr	r2, [pc, #28]	; (80010ac <MX_SPI1_Init+0xfc>)
 8001090:	0019      	movs	r1, r3
 8001092:	0010      	movs	r0, r2
 8001094:	f001 fba8 	bl	80027e8 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <MX_SPI1_Init+0xfc>)
 800109a:	2100      	movs	r1, #0
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff fcd3 	bl	8000a48 <LL_SPI_SetStandard>
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b011      	add	sp, #68	; 0x44
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	40013000 	.word	0x40013000

080010b0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80010b6:	2428      	movs	r4, #40	; 0x28
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	0018      	movs	r0, r3
 80010bc:	2310      	movs	r3, #16
 80010be:	001a      	movs	r2, r3
 80010c0:	2100      	movs	r1, #0
 80010c2:	f001 ff3f 	bl	8002f44 <memset>
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010c6:	2518      	movs	r5, #24
 80010c8:	197b      	adds	r3, r7, r5
 80010ca:	0018      	movs	r0, r3
 80010cc:	2310      	movs	r3, #16
 80010ce:	001a      	movs	r2, r3
 80010d0:	2100      	movs	r1, #0
 80010d2:	f001 ff37 	bl	8002f44 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	003b      	movs	r3, r7
 80010d8:	0018      	movs	r0, r3
 80010da:	2318      	movs	r3, #24
 80010dc:	001a      	movs	r2, r3
 80010de:	2100      	movs	r1, #0
 80010e0:	f001 ff30 	bl	8002f44 <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff fc37 	bl	8000958 <LL_APB1_GRP1_EnableClock>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	TIM_InitStruct.Prescaler = 124;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	227c      	movs	r2, #124	; 0x7c
 80010ee:	801a      	strh	r2, [r3, #0]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	2240      	movs	r2, #64	; 0x40
 80010f4:	605a      	str	r2, [r3, #4]
	TIM_InitStruct.Autoreload = 255;
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	22ff      	movs	r2, #255	; 0xff
 80010fa:	609a      	str	r2, [r3, #8]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
	LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001102:	193a      	adds	r2, r7, r4
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	05db      	lsls	r3, r3, #23
 8001108:	0011      	movs	r1, r2
 800110a:	0018      	movs	r0, r3
 800110c:	f001 fc18 	bl	8002940 <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM2);
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff fcb7 	bl	8000a88 <LL_TIM_DisableARRPreload>
	LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	2100      	movs	r1, #0
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff fd69 	bl	8000bf8 <LL_TIM_SetClockSource>
	LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	2101      	movs	r1, #1
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fcf3 	bl	8000b18 <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001132:	0029      	movs	r1, r5
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2260      	movs	r2, #96	; 0x60
 8001138:	601a      	str	r2, [r3, #0]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitStruct.CompareValue = 0;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
	LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800114c:	187a      	adds	r2, r7, r1
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	2101      	movs	r1, #1
 8001154:	0018      	movs	r0, r3
 8001156:	f001 fc3b 	bl	80029d0 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	2101      	movs	r1, #1
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff fca1 	bl	8000aa8 <LL_TIM_OC_DisableFast>
	LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_CC1IF);
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	2130      	movs	r1, #48	; 0x30
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff fd57 	bl	8000c20 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM2);
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	0018      	movs	r0, r3
 8001178:	f7ff fd64 	bl	8000c44 <LL_TIM_DisableMasterSlaveMode>
	LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	05db      	lsls	r3, r3, #23
 8001180:	2101      	movs	r1, #1
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff fd00 	bl	8000b88 <LL_TIM_OC_DisablePreload>
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001188:	2001      	movs	r0, #1
 800118a:	f7ff fc11 	bl	80009b0 <LL_IOP_GRP1_EnableClock>
	/**TIM2 GPIO Configuration
  PA8   ------> TIM2_CH1
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800118e:	003b      	movs	r3, r7
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	0052      	lsls	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001196:	003b      	movs	r3, r7
 8001198:	2202      	movs	r2, #2
 800119a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800119c:	003b      	movs	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011a2:	003b      	movs	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011a8:	003b      	movs	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80011ae:	003b      	movs	r3, r7
 80011b0:	2205      	movs	r2, #5
 80011b2:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	003a      	movs	r2, r7
 80011b6:	23a0      	movs	r3, #160	; 0xa0
 80011b8:	05db      	lsls	r3, r3, #23
 80011ba:	0011      	movs	r1, r2
 80011bc:	0018      	movs	r0, r3
 80011be:	f001 f8fc 	bl	80023ba <LL_GPIO_Init>

}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b00e      	add	sp, #56	; 0x38
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080011cc <MX_TIM21_Init>:
 * @brief TIM21 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM21_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM21_Init 0 */

	/* USER CODE END TIM21_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80011d2:	003b      	movs	r3, r7
 80011d4:	0018      	movs	r0, r3
 80011d6:	2310      	movs	r3, #16
 80011d8:	001a      	movs	r2, r3
 80011da:	2100      	movs	r1, #0
 80011dc:	f001 feb2 	bl	8002f44 <memset>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM21);
 80011e0:	2004      	movs	r0, #4
 80011e2:	f7ff fbcf 	bl	8000984 <LL_APB2_GRP1_EnableClock>

	/* TIM21 interrupt Init */
	NVIC_SetPriority(TIM21_IRQn, 1);
 80011e6:	2101      	movs	r1, #1
 80011e8:	2014      	movs	r0, #20
 80011ea:	f7ff f9cf 	bl	800058c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM21_IRQn);
 80011ee:	2014      	movs	r0, #20
 80011f0:	f7ff f9b2 	bl	8000558 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM21_Init 1 */

	/* USER CODE END TIM21_Init 1 */
	TIM_InitStruct.Prescaler = 0;
 80011f4:	003b      	movs	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	801a      	strh	r2, [r3, #0]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80011fa:	003b      	movs	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
	TIM_InitStruct.Autoreload = 31999;
 8001200:	003b      	movs	r3, r7
 8001202:	4a10      	ldr	r2, [pc, #64]	; (8001244 <MX_TIM21_Init+0x78>)
 8001204:	609a      	str	r2, [r3, #8]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001206:	003b      	movs	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
	LL_TIM_Init(TIM21, &TIM_InitStruct);
 800120c:	003b      	movs	r3, r7
 800120e:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <MX_TIM21_Init+0x7c>)
 8001210:	0019      	movs	r1, r3
 8001212:	0010      	movs	r0, r2
 8001214:	f001 fb94 	bl	8002940 <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM21);
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_TIM21_Init+0x7c>)
 800121a:	0018      	movs	r0, r3
 800121c:	f7ff fc26 	bl	8000a6c <LL_TIM_EnableARRPreload>
	LL_TIM_SetClockSource(TIM21, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_TIM21_Init+0x7c>)
 8001222:	2100      	movs	r1, #0
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff fce7 	bl	8000bf8 <LL_TIM_SetClockSource>
	LL_TIM_SetTriggerOutput(TIM21, LL_TIM_TRGO_RESET);
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_TIM21_Init+0x7c>)
 800122c:	2100      	movs	r1, #0
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff fcf6 	bl	8000c20 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM21);
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <MX_TIM21_Init+0x7c>)
 8001236:	0018      	movs	r0, r3
 8001238:	f7ff fd04 	bl	8000c44 <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM21_Init 2 */

	/* USER CODE END TIM21_Init 2 */

}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b004      	add	sp, #16
 8001242:	bd80      	pop	{r7, pc}
 8001244:	00007cff 	.word	0x00007cff
 8001248:	40010800 	.word	0x40010800

0800124c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b08f      	sub	sp, #60	; 0x3c
 8001250:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = {0};
 8001252:	241c      	movs	r4, #28
 8001254:	193b      	adds	r3, r7, r4
 8001256:	0018      	movs	r0, r3
 8001258:	231c      	movs	r3, #28
 800125a:	001a      	movs	r2, r3
 800125c:	2100      	movs	r1, #0
 800125e:	f001 fe71 	bl	8002f44 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	0018      	movs	r0, r3
 8001266:	2318      	movs	r3, #24
 8001268:	001a      	movs	r2, r3
 800126a:	2100      	movs	r1, #0
 800126c:	f001 fe6a 	bl	8002f44 <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	029b      	lsls	r3, r3, #10
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff fb6f 	bl	8000958 <LL_APB1_GRP1_EnableClock>

	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff fb98 	bl	80009b0 <LL_IOP_GRP1_EnableClock>
	/**USART2 GPIO Configuration
  PA0-CK_IN   ------> USART2_RX
  PA2   ------> USART2_TX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2202      	movs	r2, #2
 800128a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2203      	movs	r2, #3
 8001290:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	1d3a      	adds	r2, r7, #4
 80012a6:	23a0      	movs	r3, #160	; 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f001 f884 	bl	80023ba <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2204      	movs	r2, #4
 80012b6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2202      	movs	r2, #2
 80012bc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2203      	movs	r2, #3
 80012c2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2204      	movs	r2, #4
 80012d4:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	1d3a      	adds	r2, r7, #4
 80012d8:	23a0      	movs	r3, #160	; 0xa0
 80012da:	05db      	lsls	r3, r3, #23
 80012dc:	0011      	movs	r1, r2
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 f86b 	bl	80023ba <LL_GPIO_Init>

	/* USART2 interrupt Init */
	NVIC_SetPriority(USART2_IRQn, 0);
 80012e4:	2100      	movs	r1, #0
 80012e6:	201c      	movs	r0, #28
 80012e8:	f7ff f950 	bl	800058c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80012ec:	201c      	movs	r0, #28
 80012ee:	f7ff f933 	bl	8000558 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 80012f2:	193b      	adds	r3, r7, r4
 80012f4:	22e1      	movs	r2, #225	; 0xe1
 80012f6:	0252      	lsls	r2, r2, #9
 80012f8:	601a      	str	r2, [r3, #0]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80012fa:	0021      	movs	r1, r4
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001302:	187b      	adds	r3, r7, r1
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001308:	187b      	adds	r3, r7, r1
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800130e:	187b      	adds	r3, r7, r1
 8001310:	220c      	movs	r2, #12
 8001312:	611a      	str	r2, [r3, #16]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
	LL_USART_Init(USART2, &USART_InitStruct);
 8001320:	187b      	adds	r3, r7, r1
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <MX_USART2_UART_Init+0xf8>)
 8001324:	0019      	movs	r1, r3
 8001326:	0010      	movs	r0, r2
 8001328:	f001 fd4c 	bl	8002dc4 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART2);
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <MX_USART2_UART_Init+0xf8>)
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff fca6 	bl	8000c80 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <MX_USART2_UART_Init+0xf8>)
 8001336:	0018      	movs	r0, r3
 8001338:	f7ff fc93 	bl	8000c62 <LL_USART_Enable>
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b00f      	add	sp, #60	; 0x3c
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	40004400 	.word	0x40004400

08001348 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	003b      	movs	r3, r7
 8001350:	0018      	movs	r0, r3
 8001352:	2318      	movs	r3, #24
 8001354:	001a      	movs	r2, r3
 8001356:	2100      	movs	r1, #0
 8001358:	f001 fdf4 	bl	8002f44 <memset>

	/* GPIO Ports Clock Enable */
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800135c:	2001      	movs	r0, #1
 800135e:	f7ff fb27 	bl	80009b0 <LL_IOP_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(DAC_nLDAC_GPIO_Port, DAC_nLDAC_Pin);
 8001362:	23a0      	movs	r3, #160	; 0xa0
 8001364:	05db      	lsls	r3, r3, #23
 8001366:	2108      	movs	r1, #8
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff fcc0 	bl	8000cee <LL_GPIO_ResetOutputPin>

	/**/
	LL_GPIO_ResetOutputPin(DAC_nCS_GPIO_Port, DAC_nCS_Pin);
 800136e:	23a0      	movs	r3, #160	; 0xa0
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	2110      	movs	r1, #16
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff fcba 	bl	8000cee <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = DAC_nLDAC_Pin;
 800137a:	003b      	movs	r3, r7
 800137c:	2208      	movs	r2, #8
 800137e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001380:	003b      	movs	r3, r7
 8001382:	2201      	movs	r2, #1
 8001384:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001386:	003b      	movs	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800138c:	003b      	movs	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001392:	003b      	movs	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(DAC_nLDAC_GPIO_Port, &GPIO_InitStruct);
 8001398:	003a      	movs	r2, r7
 800139a:	23a0      	movs	r3, #160	; 0xa0
 800139c:	05db      	lsls	r3, r3, #23
 800139e:	0011      	movs	r1, r2
 80013a0:	0018      	movs	r0, r3
 80013a2:	f001 f80a 	bl	80023ba <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = DAC_nCS_Pin;
 80013a6:	003b      	movs	r3, r7
 80013a8:	2210      	movs	r2, #16
 80013aa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013ac:	003b      	movs	r3, r7
 80013ae:	2201      	movs	r2, #1
 80013b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013b2:	003b      	movs	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013b8:	003b      	movs	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013be:	003b      	movs	r3, r7
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(DAC_nCS_GPIO_Port, &GPIO_InitStruct);
 80013c4:	003a      	movs	r2, r7
 80013c6:	23a0      	movs	r3, #160	; 0xa0
 80013c8:	05db      	lsls	r3, r3, #23
 80013ca:	0011      	movs	r1, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	f000 fff4 	bl	80023ba <LL_GPIO_Init>

}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b006      	add	sp, #24
 80013d8:	bd80      	pop	{r7, pc}

080013da <LL_USART_IsActiveFlag_RXNE>:
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	2220      	movs	r2, #32
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	d101      	bne.n	80013f2 <LL_USART_IsActiveFlag_RXNE+0x18>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <LL_USART_IsActiveFlag_RXNE+0x1a>
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}

080013fc <LL_USART_IsActiveFlag_TXE>:
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	4013      	ands	r3, r2
 800140c:	2b80      	cmp	r3, #128	; 0x80
 800140e:	d101      	bne.n	8001414 <LL_USART_IsActiveFlag_TXE+0x18>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001414:	2300      	movs	r3, #0
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b002      	add	sp, #8
 800141c:	bd80      	pop	{r7, pc}

0800141e <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	b2db      	uxtb	r3, r3
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}

08001434 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	000a      	movs	r2, r1
 800143e:	1cfb      	adds	r3, r7, #3
 8001440:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8001442:	1cfb      	adds	r3, r7, #3
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <SerialTransmit>:

#include "serial.h"
#include "main.h"
// Question 3.4 : Communication Uart
// Fonction pour transmettre sur l'uart
uint8_t SerialTransmit(char * pData, uint16_t Size) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	000a      	movs	r2, r1
 800145e:	1cbb      	adds	r3, r7, #2
 8001460:	801a      	strh	r2, [r3, #0]
	for (uint8_t i= 0; i< Size; i++) {
 8001462:	230f      	movs	r3, #15
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	e017      	b.n	800149c <SerialTransmit+0x48>
		LL_USART_TransmitData8(USART2, pData[i]);
 800146c:	230f      	movs	r3, #15
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	18d3      	adds	r3, r2, r3
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <SerialTransmit+0x64>)
 800147a:	0019      	movs	r1, r3
 800147c:	0010      	movs	r0, r2
 800147e:	f7ff ffd9 	bl	8001434 <LL_USART_TransmitData8>
		while(LL_USART_IsActiveFlag_TXE(USART2)==0);
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <SerialTransmit+0x64>)
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff ffb8 	bl	80013fc <LL_USART_IsActiveFlag_TXE>
 800148c:	1e03      	subs	r3, r0, #0
 800148e:	d0f9      	beq.n	8001484 <SerialTransmit+0x30>
	for (uint8_t i= 0; i< Size; i++) {
 8001490:	210f      	movs	r1, #15
 8001492:	187b      	adds	r3, r7, r1
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	187b      	adds	r3, r7, r1
 8001498:	3201      	adds	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	230f      	movs	r3, #15
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	1cba      	adds	r2, r7, #2
 80014a6:	8812      	ldrh	r2, [r2, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8df      	bhi.n	800146c <SerialTransmit+0x18>
	}
	return 0;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	40004400 	.word	0x40004400

080014bc <SerialReceiveByte>:
	while(LL_USART_IsActiveFlag_RXNE(USART2)==0);
	return LL_USART_ReceiveData8(USART2);
}

// Fonction pour recevoir avec le Shell Q 3.5
char SerialReceiveByte (void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	while(LL_USART_IsActiveFlag_RXNE(USART2)==0);
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <SerialReceiveByte+0x24>)
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff ff88 	bl	80013da <LL_USART_IsActiveFlag_RXNE>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d0f9      	beq.n	80014c2 <SerialReceiveByte+0x6>
	return LL_USART_ReceiveData8(USART2);
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SerialReceiveByte+0x24>)
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7ff ffa4 	bl	800141e <LL_USART_ReceiveData8>
 80014d6:	0003      	movs	r3, r0
}
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	40004400 	.word	0x40004400

080014e4 <shHelp>:
extern hRCFilter_t hRCFilter;

//float DAC_reso = 3.3/255;
////		(10/3)* valeur.ADC_IN/255;

int shHelp(hShell_t * hShell, int argc, char ** argv) {
 80014e4:	b5b0      	push	{r4, r5, r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	int i;

	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\nThe following commands are available:\r\n");
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4a29      	ldr	r2, [pc, #164]	; (8001598 <shHelp+0xb4>)
 80014f4:	4694      	mov	ip, r2
 80014f6:	4463      	add	r3, ip
 80014f8:	4a28      	ldr	r2, [pc, #160]	; (800159c <shHelp+0xb8>)
 80014fa:	212a      	movs	r1, #42	; 0x2a
 80014fc:	0018      	movs	r0, r3
 80014fe:	f001 fd29 	bl	8002f54 <sniprintf>
 8001502:	0002      	movs	r2, r0
 8001504:	2112      	movs	r1, #18
 8001506:	187b      	adds	r3, r7, r1
 8001508:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	238e      	movs	r3, #142	; 0x8e
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	58d3      	ldr	r3, [r2, r3]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4820      	ldr	r0, [pc, #128]	; (8001598 <shHelp+0xb4>)
 8001516:	1810      	adds	r0, r2, r0
 8001518:	187a      	adds	r2, r7, r1
 800151a:	8812      	ldrh	r2, [r2, #0]
 800151c:	0011      	movs	r1, r2
 800151e:	4798      	blx	r3

	for(i = 0 ; i < hShell->funcListSize ; i++) {
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e02c      	b.n	8001580 <shHelp+0x9c>
		uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\t%c - %s\r\n", hShell->funcList[i].c, hShell->funcList[i].description);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4d1b      	ldr	r5, [pc, #108]	; (8001598 <shHelp+0xb4>)
 800152a:	1958      	adds	r0, r3, r5
 800152c:	68f9      	ldr	r1, [r7, #12]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	0013      	movs	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	189b      	adds	r3, r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	18cb      	adds	r3, r1, r3
 800153a:	3304      	adds	r3, #4
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	001c      	movs	r4, r3
 8001540:	68f9      	ldr	r1, [r7, #12]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	0013      	movs	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	189b      	adds	r3, r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	18cb      	adds	r3, r1, r3
 800154e:	330c      	adds	r3, #12
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <shHelp+0xbc>)
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	0023      	movs	r3, r4
 8001558:	212a      	movs	r1, #42	; 0x2a
 800155a:	f001 fcfb 	bl	8002f54 <sniprintf>
 800155e:	0002      	movs	r2, r0
 8001560:	2110      	movs	r1, #16
 8001562:	187b      	adds	r3, r7, r1
 8001564:	801a      	strh	r2, [r3, #0]
		hShell->transmitCb(hShell->printBuffer, size);
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	238e      	movs	r3, #142	; 0x8e
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	58d3      	ldr	r3, [r2, r3]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	1950      	adds	r0, r2, r5
 8001572:	187a      	adds	r2, r7, r1
 8001574:	8812      	ldrh	r2, [r2, #0]
 8001576:	0011      	movs	r1, r2
 8001578:	4798      	blx	r3
	for(i = 0 ; i < hShell->funcListSize ; i++) {
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	001a      	movs	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	4293      	cmp	r3, r2
 800158a:	dbcc      	blt.n	8001526 <shHelp+0x42>
	}

	return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b006      	add	sp, #24
 8001594:	bdb0      	pop	{r4, r5, r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	0000020e 	.word	0x0000020e
 800159c:	08003914 	.word	0x08003914
 80015a0:	08003940 	.word	0x08003940

080015a4 <shHello>:

int shHello(hShell_t * hShell, int argc, char ** argv) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, " {•̃_•̃} Hello World !!! \r\n");
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <shHello+0x48>)
 80015b4:	4694      	mov	ip, r2
 80015b6:	4463      	add	r3, ip
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <shHello+0x4c>)
 80015ba:	212a      	movs	r1, #42	; 0x2a
 80015bc:	0018      	movs	r0, r3
 80015be:	f001 fcc9 	bl	8002f54 <sniprintf>
 80015c2:	0002      	movs	r2, r0
 80015c4:	2116      	movs	r1, #22
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	238e      	movs	r3, #142	; 0x8e
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	58d3      	ldr	r3, [r2, r3]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <shHello+0x48>)
 80015d6:	1810      	adds	r0, r2, r0
 80015d8:	187a      	adds	r2, r7, r1
 80015da:	8812      	ldrh	r2, [r2, #0]
 80015dc:	0011      	movs	r1, r2
 80015de:	4798      	blx	r3
	return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b006      	add	sp, #24
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	0000020e 	.word	0x0000020e
 80015f0:	0800394c 	.word	0x0800394c

080015f4 <shRead>:

int shRead(hShell_t * hShell, int argc, char ** argv) {
 80015f4:	b5b0      	push	{r4, r5, r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]

// Mis en commentaire pour libérer la mémoire
	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n === Lecture des valeurs ===\r\n");
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <shRead+0x144>)
 8001604:	4694      	mov	ip, r2
 8001606:	4463      	add	r3, ip
 8001608:	4a4c      	ldr	r2, [pc, #304]	; (800173c <shRead+0x148>)
 800160a:	212a      	movs	r1, #42	; 0x2a
 800160c:	0018      	movs	r0, r3
 800160e:	f001 fca1 	bl	8002f54 <sniprintf>
 8001612:	0002      	movs	r2, r0
 8001614:	2416      	movs	r4, #22
 8001616:	193b      	adds	r3, r7, r4
 8001618:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	238e      	movs	r3, #142	; 0x8e
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	58d3      	ldr	r3, [r2, r3]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4d44      	ldr	r5, [pc, #272]	; (8001738 <shRead+0x144>)
 8001626:	1950      	adds	r0, r2, r5
 8001628:	193a      	adds	r2, r7, r4
 800162a:	8812      	ldrh	r2, [r2, #0]
 800162c:	0011      	movs	r1, r2
 800162e:	4798      	blx	r3
	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "LED :\r\n   Luminosité : %d/255 \r\n", ledStatus.luminosite);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1958      	adds	r0, r3, r5
 8001634:	4b42      	ldr	r3, [pc, #264]	; (8001740 <shRead+0x14c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4a42      	ldr	r2, [pc, #264]	; (8001744 <shRead+0x150>)
 800163a:	212a      	movs	r1, #42	; 0x2a
 800163c:	f001 fc8a 	bl	8002f54 <sniprintf>
 8001640:	0002      	movs	r2, r0
 8001642:	193b      	adds	r3, r7, r4
 8001644:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	238e      	movs	r3, #142	; 0x8e
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	58d3      	ldr	r3, [r2, r3]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	1950      	adds	r0, r2, r5
 8001652:	193a      	adds	r2, r7, r4
 8001654:	8812      	ldrh	r2, [r2, #0]
 8001656:	0011      	movs	r1, r2
 8001658:	4798      	blx	r3
	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "   Augmentation(0)/Diminution(1) : %d \r\n", ledStatus.updown);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1958      	adds	r0, r3, r5
 800165e:	4b38      	ldr	r3, [pc, #224]	; (8001740 <shRead+0x14c>)
 8001660:	785b      	ldrb	r3, [r3, #1]
 8001662:	4a39      	ldr	r2, [pc, #228]	; (8001748 <shRead+0x154>)
 8001664:	212a      	movs	r1, #42	; 0x2a
 8001666:	f001 fc75 	bl	8002f54 <sniprintf>
 800166a:	0002      	movs	r2, r0
 800166c:	193b      	adds	r3, r7, r4
 800166e:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	238e      	movs	r3, #142	; 0x8e
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	58d3      	ldr	r3, [r2, r3]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	1950      	adds	r0, r2, r5
 800167c:	193a      	adds	r2, r7, r4
 800167e:	8812      	ldrh	r2, [r2, #0]
 8001680:	0011      	movs	r1, r2
 8001682:	4798      	blx	r3
	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "Signal Triangle :\r\n   Amplitude : %d/255\r\n", DacSPI.amplitude);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	1958      	adds	r0, r3, r5
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <shRead+0x158>)
 800168a:	791b      	ldrb	r3, [r3, #4]
 800168c:	4a30      	ldr	r2, [pc, #192]	; (8001750 <shRead+0x15c>)
 800168e:	212a      	movs	r1, #42	; 0x2a
 8001690:	f001 fc60 	bl	8002f54 <sniprintf>
 8001694:	0002      	movs	r2, r0
 8001696:	193b      	adds	r3, r7, r4
 8001698:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	238e      	movs	r3, #142	; 0x8e
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	58d3      	ldr	r3, [r2, r3]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	1950      	adds	r0, r2, r5
 80016a6:	193a      	adds	r2, r7, r4
 80016a8:	8812      	ldrh	r2, [r2, #0]
 80016aa:	0011      	movs	r1, r2
 80016ac:	4798      	blx	r3
	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "   Montant(0)/Descendant(1) : %d \r\n", DacSPI.updown);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1958      	adds	r0, r3, r5
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <shRead+0x158>)
 80016b4:	795b      	ldrb	r3, [r3, #5]
 80016b6:	4a27      	ldr	r2, [pc, #156]	; (8001754 <shRead+0x160>)
 80016b8:	212a      	movs	r1, #42	; 0x2a
 80016ba:	f001 fc4b 	bl	8002f54 <sniprintf>
 80016be:	0002      	movs	r2, r0
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	238e      	movs	r3, #142	; 0x8e
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	58d3      	ldr	r3, [r2, r3]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	1950      	adds	r0, r2, r5
 80016d0:	193a      	adds	r2, r7, r4
 80016d2:	8812      	ldrh	r2, [r2, #0]
 80016d4:	0011      	movs	r1, r2
 80016d6:	4798      	blx	r3
	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "Lecture ADC :\r\n");
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4a17      	ldr	r2, [pc, #92]	; (8001738 <shRead+0x144>)
 80016dc:	4694      	mov	ip, r2
 80016de:	4463      	add	r3, ip
 80016e0:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <shRead+0x164>)
 80016e2:	212a      	movs	r1, #42	; 0x2a
 80016e4:	0018      	movs	r0, r3
 80016e6:	f001 fc35 	bl	8002f54 <sniprintf>
 80016ea:	0002      	movs	r2, r0
 80016ec:	193b      	adds	r3, r7, r4
 80016ee:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	238e      	movs	r3, #142	; 0x8e
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	58d3      	ldr	r3, [r2, r3]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	1950      	adds	r0, r2, r5
 80016fc:	193a      	adds	r2, r7, r4
 80016fe:	8812      	ldrh	r2, [r2, #0]
 8001700:	0011      	movs	r1, r2
 8001702:	4798      	blx	r3
	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "   Résolution(8bits) : %d/255\r\n", valeur.ADC_IN);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1958      	adds	r0, r3, r5
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <shRead+0x168>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	4a14      	ldr	r2, [pc, #80]	; (8001760 <shRead+0x16c>)
 800170e:	212a      	movs	r1, #42	; 0x2a
 8001710:	f001 fc20 	bl	8002f54 <sniprintf>
 8001714:	0002      	movs	r2, r0
 8001716:	193b      	adds	r3, r7, r4
 8001718:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	238e      	movs	r3, #142	; 0x8e
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	58d3      	ldr	r3, [r2, r3]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	1950      	adds	r0, r2, r5
 8001726:	193a      	adds	r2, r7, r4
 8001728:	8812      	ldrh	r2, [r2, #0]
 800172a:	0011      	movs	r1, r2
 800172c:	4798      	blx	r3

// Mauvaise idee : Demande trop de place dans la mémoire
//	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "Tension (Volt) :\r\n %f \r\n", DAC_reso*valeur.ADC_IN);
//	hShell->transmitCb(hShell->printBuffer, size);

	return 0;
 800172e:	2300      	movs	r3, #0
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b006      	add	sp, #24
 8001736:	bdb0      	pop	{r4, r5, r7, pc}
 8001738:	0000020e 	.word	0x0000020e
 800173c:	08003970 	.word	0x08003970
 8001740:	2000008c 	.word	0x2000008c
 8001744:	08003994 	.word	0x08003994
 8001748:	080039b8 	.word	0x080039b8
 800174c:	20000000 	.word	0x20000000
 8001750:	080039e4 	.word	0x080039e4
 8001754:	08003a10 	.word	0x08003a10
 8001758:	08003a34 	.word	0x08003a34
 800175c:	20000090 	.word	0x20000090
 8001760:	08003a44 	.word	0x08003a44

08001764 <shWriteFilter>:

int shWriteFilter(hShell_t * hShell, int argc, char ** argv) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n === Filtre RC : Ecriture A,B et D===\r\n");
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4a2b      	ldr	r2, [pc, #172]	; (8001820 <shWriteFilter+0xbc>)
 8001774:	4694      	mov	ip, r2
 8001776:	4463      	add	r3, ip
 8001778:	4a2a      	ldr	r2, [pc, #168]	; (8001824 <shWriteFilter+0xc0>)
 800177a:	212a      	movs	r1, #42	; 0x2a
 800177c:	0018      	movs	r0, r3
 800177e:	f001 fbe9 	bl	8002f54 <sniprintf>
 8001782:	0002      	movs	r2, r0
 8001784:	2116      	movs	r1, #22
 8001786:	187b      	adds	r3, r7, r1
 8001788:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	238e      	movs	r3, #142	; 0x8e
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	58d3      	ldr	r3, [r2, r3]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4822      	ldr	r0, [pc, #136]	; (8001820 <shWriteFilter+0xbc>)
 8001796:	1810      	adds	r0, r2, r0
 8001798:	187a      	adds	r2, r7, r1
 800179a:	8812      	ldrh	r2, [r2, #0]
 800179c:	0011      	movs	r1, r2
 800179e:	4798      	blx	r3

	if (argc == 4) {
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d11e      	bne.n	80017e4 <shWriteFilter+0x80>
		hRCFilter.coeffA = atoi(argv[1]);			// on écrit dans coeff A
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3304      	adds	r3, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0018      	movs	r0, r3
 80017ae:	f001 fb99 	bl	8002ee4 <atoi>
 80017b2:	0003      	movs	r3, r0
 80017b4:	001a      	movs	r2, r3
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <shWriteFilter+0xc4>)
 80017b8:	601a      	str	r2, [r3, #0]
		hRCFilter.coeffB = atoi(argv[2]);			// on écrit dans coeff B
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3308      	adds	r3, #8
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f001 fb8f 	bl	8002ee4 <atoi>
 80017c6:	0003      	movs	r3, r0
 80017c8:	001a      	movs	r2, r3
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <shWriteFilter+0xc4>)
 80017cc:	605a      	str	r2, [r3, #4]
		hRCFilter.coeffD = atoi(argv[3]);			// on écrit dans coeff D
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	330c      	adds	r3, #12
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0018      	movs	r0, r3
 80017d6:	f001 fb85 	bl	8002ee4 <atoi>
 80017da:	0003      	movs	r3, r0
 80017dc:	001a      	movs	r2, r3
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <shWriteFilter+0xc4>)
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	e017      	b.n	8001814 <shWriteFilter+0xb0>
	}
	else {
		size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "   ! Erreur arguments A, B, et D \r\n");
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <shWriteFilter+0xbc>)
 80017e8:	4694      	mov	ip, r2
 80017ea:	4463      	add	r3, ip
 80017ec:	4a0f      	ldr	r2, [pc, #60]	; (800182c <shWriteFilter+0xc8>)
 80017ee:	212a      	movs	r1, #42	; 0x2a
 80017f0:	0018      	movs	r0, r3
 80017f2:	f001 fbaf 	bl	8002f54 <sniprintf>
 80017f6:	0002      	movs	r2, r0
 80017f8:	2116      	movs	r1, #22
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	801a      	strh	r2, [r3, #0]
		hShell->transmitCb(hShell->printBuffer, size);
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	238e      	movs	r3, #142	; 0x8e
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	58d3      	ldr	r3, [r2, r3]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <shWriteFilter+0xbc>)
 800180a:	1810      	adds	r0, r2, r0
 800180c:	187a      	adds	r2, r7, r1
 800180e:	8812      	ldrh	r2, [r2, #0]
 8001810:	0011      	movs	r1, r2
 8001812:	4798      	blx	r3
	}
	return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b006      	add	sp, #24
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	0000020e 	.word	0x0000020e
 8001824:	08003a68 	.word	0x08003a68
 8001828:	200000a4 	.word	0x200000a4
 800182c:	08003a94 	.word	0x08003a94

08001830 <shReadFilter>:

int shReadFilter(hShell_t * hShell, int argc, char ** argv) {
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n === Filtre RC : Lecture A,B et D ===\r\n");
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a2e      	ldr	r2, [pc, #184]	; (80018f8 <shReadFilter+0xc8>)
 8001840:	4694      	mov	ip, r2
 8001842:	4463      	add	r3, ip
 8001844:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <shReadFilter+0xcc>)
 8001846:	212a      	movs	r1, #42	; 0x2a
 8001848:	0018      	movs	r0, r3
 800184a:	f001 fb83 	bl	8002f54 <sniprintf>
 800184e:	0002      	movs	r2, r0
 8001850:	2416      	movs	r4, #22
 8001852:	193b      	adds	r3, r7, r4
 8001854:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	238e      	movs	r3, #142	; 0x8e
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	58d3      	ldr	r3, [r2, r3]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4d25      	ldr	r5, [pc, #148]	; (80018f8 <shReadFilter+0xc8>)
 8001862:	1950      	adds	r0, r2, r5
 8001864:	193a      	adds	r2, r7, r4
 8001866:	8812      	ldrh	r2, [r2, #0]
 8001868:	0011      	movs	r1, r2
 800186a:	4798      	blx	r3
	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "   Coeff A : %lu\r\n", hRCFilter.coeffA);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1958      	adds	r0, r3, r5
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <shReadFilter+0xd0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a23      	ldr	r2, [pc, #140]	; (8001904 <shReadFilter+0xd4>)
 8001876:	212a      	movs	r1, #42	; 0x2a
 8001878:	f001 fb6c 	bl	8002f54 <sniprintf>
 800187c:	0002      	movs	r2, r0
 800187e:	193b      	adds	r3, r7, r4
 8001880:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	238e      	movs	r3, #142	; 0x8e
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	58d3      	ldr	r3, [r2, r3]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	1950      	adds	r0, r2, r5
 800188e:	193a      	adds	r2, r7, r4
 8001890:	8812      	ldrh	r2, [r2, #0]
 8001892:	0011      	movs	r1, r2
 8001894:	4798      	blx	r3
	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "   Coeff B : %lu\r\n", hRCFilter.coeffB);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1958      	adds	r0, r3, r5
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <shReadFilter+0xd0>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <shReadFilter+0xd8>)
 80018a0:	212a      	movs	r1, #42	; 0x2a
 80018a2:	f001 fb57 	bl	8002f54 <sniprintf>
 80018a6:	0002      	movs	r2, r0
 80018a8:	193b      	adds	r3, r7, r4
 80018aa:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	238e      	movs	r3, #142	; 0x8e
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	58d3      	ldr	r3, [r2, r3]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	1950      	adds	r0, r2, r5
 80018b8:	193a      	adds	r2, r7, r4
 80018ba:	8812      	ldrh	r2, [r2, #0]
 80018bc:	0011      	movs	r1, r2
 80018be:	4798      	blx	r3
	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "   Coeff D : %lu\r\n", hRCFilter.coeffD);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1958      	adds	r0, r3, r5
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <shReadFilter+0xd0>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a10      	ldr	r2, [pc, #64]	; (800190c <shReadFilter+0xdc>)
 80018ca:	212a      	movs	r1, #42	; 0x2a
 80018cc:	f001 fb42 	bl	8002f54 <sniprintf>
 80018d0:	0002      	movs	r2, r0
 80018d2:	0021      	movs	r1, r4
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	238e      	movs	r3, #142	; 0x8e
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	58d3      	ldr	r3, [r2, r3]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	1950      	adds	r0, r2, r5
 80018e4:	187a      	adds	r2, r7, r1
 80018e6:	8812      	ldrh	r2, [r2, #0]
 80018e8:	0011      	movs	r1, r2
 80018ea:	4798      	blx	r3
	return 0;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b006      	add	sp, #24
 80018f4:	bdb0      	pop	{r4, r5, r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	0000020e 	.word	0x0000020e
 80018fc:	08003ab8 	.word	0x08003ab8
 8001900:	200000a4 	.word	0x200000a4
 8001904:	08003ae4 	.word	0x08003ae4
 8001908:	08003af8 	.word	0x08003af8
 800190c:	08003b0c 	.word	0x08003b0c

08001910 <isChar>:

uint8_t isChar(char c) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	0002      	movs	r2, r0
 8001918:	1dfb      	adds	r3, r7, #7
 800191a:	701a      	strb	r2, [r3, #0]
	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c == '+') || (c == '-')) {
 800191c:	1dfb      	adds	r3, r7, #7
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b40      	cmp	r3, #64	; 0x40
 8001922:	d903      	bls.n	800192c <isChar+0x1c>
 8001924:	1dfb      	adds	r3, r7, #7
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b5a      	cmp	r3, #90	; 0x5a
 800192a:	d917      	bls.n	800195c <isChar+0x4c>
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b60      	cmp	r3, #96	; 0x60
 8001932:	d903      	bls.n	800193c <isChar+0x2c>
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b7a      	cmp	r3, #122	; 0x7a
 800193a:	d90f      	bls.n	800195c <isChar+0x4c>
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b2f      	cmp	r3, #47	; 0x2f
 8001942:	d903      	bls.n	800194c <isChar+0x3c>
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b39      	cmp	r3, #57	; 0x39
 800194a:	d907      	bls.n	800195c <isChar+0x4c>
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b2b      	cmp	r3, #43	; 0x2b
 8001952:	d003      	beq.n	800195c <isChar+0x4c>
 8001954:	1dfb      	adds	r3, r7, #7
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b2d      	cmp	r3, #45	; 0x2d
 800195a:	d101      	bne.n	8001960 <isChar+0x50>
		return 1;
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <isChar+0x52>
	}
	else {
		return 0;
 8001960:	2300      	movs	r3, #0
	}
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b002      	add	sp, #8
 8001968:	bd80      	pop	{r7, pc}

0800196a <isSpace>:

uint8_t isSpace(char c) {
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	0002      	movs	r2, r0
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	701a      	strb	r2, [r3, #0]
	if (c == ' ') {
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b20      	cmp	r3, #32
 800197c:	d101      	bne.n	8001982 <isSpace+0x18>
		return 1;
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <isSpace+0x1a>
	}
	else {
		return 0;
 8001982:	2300      	movs	r3, #0
	}
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}

0800198c <ShellInit>:
 *
 * @param hShell      Shell handle
 * @param transmitCb  Function to be called when character has to be called
 * @retval Status (0 if successful)
 */
uint8_t ShellInit(hShell_t * hShell, ShellTransmitCb_t transmitCb) {
 800198c:	b5b0      	push	{r4, r5, r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
	if (hShell == NULL) {
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <ShellInit+0x14>
		return 255;
 800199c:	23ff      	movs	r3, #255	; 0xff
 800199e:	e07e      	b.n	8001a9e <ShellInit+0x112>
	}

	hShell->funcListSize = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
	hShell->transmitCb = transmitCb;
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	238e      	movs	r3, #142	; 0x8e
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	6839      	ldr	r1, [r7, #0]
 80019ae:	50d1      	str	r1, [r2, r3]
	hShell->cmdLinePosition = 0;
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	238f      	movs	r3, #143	; 0x8f
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	2100      	movs	r1, #0
 80019b8:	52d1      	strh	r1, [r2, r3]
	hShell->arrowPending = 0;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a3a      	ldr	r2, [pc, #232]	; (8001aa8 <ShellInit+0x11c>)
 80019be:	2100      	movs	r1, #0
 80019c0:	5499      	strb	r1, [r3, r2]
	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n\r\n   3DN : TP Microcontroleur\r\n");
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a39      	ldr	r2, [pc, #228]	; (8001aac <ShellInit+0x120>)
 80019c6:	4694      	mov	ip, r2
 80019c8:	4463      	add	r3, ip
 80019ca:	4a39      	ldr	r2, [pc, #228]	; (8001ab0 <ShellInit+0x124>)
 80019cc:	212a      	movs	r1, #42	; 0x2a
 80019ce:	0018      	movs	r0, r3
 80019d0:	f001 fac0 	bl	8002f54 <sniprintf>
 80019d4:	0002      	movs	r2, r0
 80019d6:	240e      	movs	r4, #14
 80019d8:	193b      	adds	r3, r7, r4
 80019da:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	238e      	movs	r3, #142	; 0x8e
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	58d3      	ldr	r3, [r2, r3]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4d31      	ldr	r5, [pc, #196]	; (8001aac <ShellInit+0x120>)
 80019e8:	1950      	adds	r0, r2, r5
 80019ea:	193a      	adds	r2, r7, r4
 80019ec:	8812      	ldrh	r2, [r2, #0]
 80019ee:	0011      	movs	r1, r2
 80019f0:	4798      	blx	r3
	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "Baptiste FRITOT - Jeremy VICENTE\r\n");
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a2d      	ldr	r2, [pc, #180]	; (8001aac <ShellInit+0x120>)
 80019f6:	4694      	mov	ip, r2
 80019f8:	4463      	add	r3, ip
 80019fa:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <ShellInit+0x128>)
 80019fc:	212a      	movs	r1, #42	; 0x2a
 80019fe:	0018      	movs	r0, r3
 8001a00:	f001 faa8 	bl	8002f54 <sniprintf>
 8001a04:	0002      	movs	r2, r0
 8001a06:	0021      	movs	r1, r4
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	238e      	movs	r3, #142	; 0x8e
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	58d3      	ldr	r3, [r2, r3]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	1950      	adds	r0, r2, r5
 8001a18:	000c      	movs	r4, r1
 8001a1a:	187a      	adds	r2, r7, r1
 8001a1c:	8812      	ldrh	r2, [r2, #0]
 8001a1e:	0011      	movs	r1, r2
 8001a20:	4798      	blx	r3
	size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "===== Monsieur Shell v0.4 =====\r\n");
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a21      	ldr	r2, [pc, #132]	; (8001aac <ShellInit+0x120>)
 8001a26:	4694      	mov	ip, r2
 8001a28:	4463      	add	r3, ip
 8001a2a:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <ShellInit+0x12c>)
 8001a2c:	212a      	movs	r1, #42	; 0x2a
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f001 fa90 	bl	8002f54 <sniprintf>
 8001a34:	0002      	movs	r2, r0
 8001a36:	0021      	movs	r1, r4
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	238e      	movs	r3, #142	; 0x8e
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	58d3      	ldr	r3, [r2, r3]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	1950      	adds	r0, r2, r5
 8001a48:	187a      	adds	r2, r7, r1
 8001a4a:	8812      	ldrh	r2, [r2, #0]
 8001a4c:	0011      	movs	r1, r2
 8001a4e:	4798      	blx	r3

	ShellAdd(hShell, 'h', shHelp, "Displays this help message");
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <ShellInit+0x130>)
 8001a52:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <ShellInit+0x134>)
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	2168      	movs	r1, #104	; 0x68
 8001a58:	f000 f846 	bl	8001ae8 <ShellAdd>
	ShellAdd(hShell, 'a', shHello, "Hello World");
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <ShellInit+0x138>)
 8001a5e:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <ShellInit+0x13c>)
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	2161      	movs	r1, #97	; 0x61
 8001a64:	f000 f840 	bl	8001ae8 <ShellAdd>
	ShellAdd(hShell, 'z', shRead, "Read Value");
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <ShellInit+0x140>)
 8001a6a:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <ShellInit+0x144>)
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	217a      	movs	r1, #122	; 0x7a
 8001a70:	f000 f83a 	bl	8001ae8 <ShellAdd>
	ShellAdd(hShell, 'q', shWriteFilter, "Filter : Modify Coef A, B and D");
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <ShellInit+0x148>)
 8001a76:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <ShellInit+0x14c>)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	2171      	movs	r1, #113	; 0x71
 8001a7c:	f000 f834 	bl	8001ae8 <ShellAdd>
	ShellAdd(hShell, 's', shReadFilter, "Filter : Read Data A, B and D");
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <ShellInit+0x150>)
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <ShellInit+0x154>)
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	2173      	movs	r1, #115	; 0x73
 8001a88:	f000 f82e 	bl	8001ae8 <ShellAdd>

	hShell->transmitCb("\r\n> ", 4);
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	238e      	movs	r3, #142	; 0x8e
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	58d3      	ldr	r3, [r2, r3]
 8001a94:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <ShellInit+0x158>)
 8001a96:	2104      	movs	r1, #4
 8001a98:	0010      	movs	r0, r2
 8001a9a:	4798      	blx	r3

	return 0;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b004      	add	sp, #16
 8001aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	0000023e 	.word	0x0000023e
 8001aac:	0000020e 	.word	0x0000020e
 8001ab0:	08003b20 	.word	0x08003b20
 8001ab4:	08003b44 	.word	0x08003b44
 8001ab8:	08003b68 	.word	0x08003b68
 8001abc:	08003b8c 	.word	0x08003b8c
 8001ac0:	080014e5 	.word	0x080014e5
 8001ac4:	08003ba8 	.word	0x08003ba8
 8001ac8:	080015a5 	.word	0x080015a5
 8001acc:	08003bb4 	.word	0x08003bb4
 8001ad0:	080015f5 	.word	0x080015f5
 8001ad4:	08003bc0 	.word	0x08003bc0
 8001ad8:	08001765 	.word	0x08001765
 8001adc:	08003be0 	.word	0x08003be0
 8001ae0:	08001831 	.word	0x08001831
 8001ae4:	08003c00 	.word	0x08003c00

08001ae8 <ShellAdd>:

uint8_t ShellAdd(hShell_t * hShell, char c, ShellFuncPtr_t pFunc, char * description) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	200b      	movs	r0, #11
 8001af6:	183b      	adds	r3, r7, r0
 8001af8:	1c0a      	adds	r2, r1, #0
 8001afa:	701a      	strb	r2, [r3, #0]
	if (!isChar(c)) {
 8001afc:	183b      	adds	r3, r7, r0
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff ff05 	bl	8001910 <isChar>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d101      	bne.n	8001b0e <ShellAdd+0x26>
		return 255;
 8001b0a:	23ff      	movs	r3, #255	; 0xff
 8001b0c:	e032      	b.n	8001b74 <ShellAdd+0x8c>
	}

	if (hShell->funcListSize < _SHELL_FUNC_LIST_MAX_SIZE) {
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b27      	cmp	r3, #39	; 0x27
 8001b14:	d82d      	bhi.n	8001b72 <ShellAdd+0x8a>
		hShell->funcList[hShell->funcListSize].c = c;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	000b      	movs	r3, r1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	185b      	adds	r3, r3, r1
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	18d3      	adds	r3, r2, r3
 8001b28:	3304      	adds	r3, #4
 8001b2a:	220b      	movs	r2, #11
 8001b2c:	18ba      	adds	r2, r7, r2
 8001b2e:	7812      	ldrb	r2, [r2, #0]
 8001b30:	701a      	strb	r2, [r3, #0]
		hShell->funcList[hShell->funcListSize].func = pFunc;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	0019      	movs	r1, r3
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	000b      	movs	r3, r1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	185b      	adds	r3, r3, r1
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	18d3      	adds	r3, r2, r3
 8001b44:	3308      	adds	r3, #8
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
		hShell->funcList[hShell->funcListSize].description = description;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	0019      	movs	r1, r3
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	000b      	movs	r3, r1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	185b      	adds	r3, r3, r1
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	18d3      	adds	r3, r2, r3
 8001b5c:	330c      	adds	r3, #12
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	601a      	str	r2, [r3, #0]
		hShell->funcListSize++;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	701a      	strb	r2, [r3, #0]
		return 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <ShellAdd+0x8c>
	}

	return 255;
 8001b72:	23ff      	movs	r3, #255	; 0xff
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b004      	add	sp, #16
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <ShellExec>:

uint8_t ShellExec(hShell_t * hShell) {
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b09f      	sub	sp, #124	; 0x7c
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	6078      	str	r0, [r7, #4]
	int argc;
	char * argv[_ARGV_SIZE];

	char * cmdLine = hShell->cmdLineBuffer;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	33e5      	adds	r3, #229	; 0xe5
 8001b88:	33ff      	adds	r3, #255	; 0xff
 8001b8a:	667b      	str	r3, [r7, #100]	; 0x64

	for(uint16_t i = 0 ; i < hShell->funcListSize ; i++) {
 8001b8c:	236a      	movs	r3, #106	; 0x6a
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2200      	movs	r2, #0
 8001b92:	801a      	strh	r2, [r3, #0]
 8001b94:	e0ae      	b.n	8001cf4 <ShellExec+0x178>
		if (hShell->funcList[i].c == cmdLine[0]) {
 8001b96:	236a      	movs	r3, #106	; 0x6a
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	881a      	ldrh	r2, [r3, #0]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	0013      	movs	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	189b      	adds	r3, r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	18cb      	adds	r3, r1, r3
 8001ba8:	3304      	adds	r3, #4
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d000      	beq.n	8001bb6 <ShellExec+0x3a>
 8001bb4:	e098      	b.n	8001ce8 <ShellExec+0x16c>
			argc = 1;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
			argv[0] = cmdLine;
 8001bba:	2308      	movs	r3, #8
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001bc0:	601a      	str	r2, [r3, #0]

			// Replacing the spaces with '\0' to be usable by the called function
			for(uint16_t i = 0 ; (i < hShell->cmdLinePosition && argc < _ARGV_SIZE) ; i++){
 8001bc2:	2368      	movs	r3, #104	; 0x68
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	801a      	strh	r2, [r3, #0]
 8001bca:	e037      	b.n	8001c3c <ShellExec+0xc0>
				if(cmdLine[i] == ' ') {
 8001bcc:	2068      	movs	r0, #104	; 0x68
 8001bce:	183b      	adds	r3, r7, r0
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001bd4:	18d3      	adds	r3, r2, r3
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d129      	bne.n	8001c30 <ShellExec+0xb4>
					cmdLine[i] = '\0';
 8001bdc:	183b      	adds	r3, r7, r0
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001be2:	18d3      	adds	r3, r2, r3
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]

					uint16_t next = i+1;
 8001be8:	2160      	movs	r1, #96	; 0x60
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	183a      	adds	r2, r7, r0
 8001bee:	8812      	ldrh	r2, [r2, #0]
 8001bf0:	3201      	adds	r2, #1
 8001bf2:	801a      	strh	r2, [r3, #0]
					if (next < hShell->cmdLinePosition && (isChar(cmdLine[next]))) {
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	238f      	movs	r3, #143	; 0x8f
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	5ad3      	ldrh	r3, [r2, r3]
 8001bfc:	187a      	adds	r2, r7, r1
 8001bfe:	8812      	ldrh	r2, [r2, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d215      	bcs.n	8001c30 <ShellExec+0xb4>
 8001c04:	000c      	movs	r4, r1
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c0c:	18d3      	adds	r3, r2, r3
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff fe7d 	bl	8001910 <isChar>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d00a      	beq.n	8001c30 <ShellExec+0xb4>
						argv[argc++] = &(cmdLine[next]);
 8001c1a:	193b      	adds	r3, r7, r4
 8001c1c:	881a      	ldrh	r2, [r3, #0]
 8001c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c20:	1c59      	adds	r1, r3, #1
 8001c22:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001c24:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001c26:	1889      	adds	r1, r1, r2
 8001c28:	2208      	movs	r2, #8
 8001c2a:	18ba      	adds	r2, r7, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	5099      	str	r1, [r3, r2]
			for(uint16_t i = 0 ; (i < hShell->cmdLinePosition && argc < _ARGV_SIZE) ; i++){
 8001c30:	2168      	movs	r1, #104	; 0x68
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	881a      	ldrh	r2, [r3, #0]
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	3201      	adds	r2, #1
 8001c3a:	801a      	strh	r2, [r3, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	238f      	movs	r3, #143	; 0x8f
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	5ad3      	ldrh	r3, [r2, r3]
 8001c44:	2268      	movs	r2, #104	; 0x68
 8001c46:	18ba      	adds	r2, r7, r2
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d202      	bcs.n	8001c54 <ShellExec+0xd8>
 8001c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c50:	2b13      	cmp	r3, #19
 8001c52:	ddbb      	ble.n	8001bcc <ShellExec+0x50>
					}
				}
			}

			// Actual call of the function
			int ret = hShell->funcList[i].func(hShell, argc, argv);
 8001c54:	236a      	movs	r3, #106	; 0x6a
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	189b      	adds	r3, r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	18cb      	adds	r3, r1, r3
 8001c66:	3308      	adds	r3, #8
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	18ba      	adds	r2, r7, r2
 8001c6e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	4798      	blx	r3
 8001c74:	0003      	movs	r3, r0
 8001c76:	65fb      	str	r3, [r7, #92]	; 0x5c

			// Error display
			if (ret == 0) {
 8001c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d117      	bne.n	8001cae <ShellExec+0x132>
				uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n%c returned successfully\r\n", cmdLine[0]);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4c2f      	ldr	r4, [pc, #188]	; (8001d40 <ShellExec+0x1c4>)
 8001c82:	1918      	adds	r0, r3, r4
 8001c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4a2e      	ldr	r2, [pc, #184]	; (8001d44 <ShellExec+0x1c8>)
 8001c8a:	212a      	movs	r1, #42	; 0x2a
 8001c8c:	f001 f962 	bl	8002f54 <sniprintf>
 8001c90:	0002      	movs	r2, r0
 8001c92:	2158      	movs	r1, #88	; 0x58
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	801a      	strh	r2, [r3, #0]
				hShell->transmitCb(hShell->printBuffer, size);
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	238e      	movs	r3, #142	; 0x8e
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	58d3      	ldr	r3, [r2, r3]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	1910      	adds	r0, r2, r4
 8001ca4:	187a      	adds	r2, r7, r1
 8001ca6:	8812      	ldrh	r2, [r2, #0]
 8001ca8:	0011      	movs	r1, r2
 8001caa:	4798      	blx	r3
 8001cac:	e01a      	b.n	8001ce4 <ShellExec+0x168>
			}
			else {
				uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n%c returned with error code %d\r\n", cmdLine[0], ret);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4c23      	ldr	r4, [pc, #140]	; (8001d40 <ShellExec+0x1c4>)
 8001cb2:	1918      	adds	r0, r3, r4
 8001cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	0019      	movs	r1, r3
 8001cba:	4a23      	ldr	r2, [pc, #140]	; (8001d48 <ShellExec+0x1cc>)
 8001cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	000b      	movs	r3, r1
 8001cc2:	212a      	movs	r1, #42	; 0x2a
 8001cc4:	f001 f946 	bl	8002f54 <sniprintf>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	215a      	movs	r1, #90	; 0x5a
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	801a      	strh	r2, [r3, #0]
				hShell->transmitCb(hShell->printBuffer, size);
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	238e      	movs	r3, #142	; 0x8e
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	58d3      	ldr	r3, [r2, r3]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	1910      	adds	r0, r2, r4
 8001cdc:	187a      	adds	r2, r7, r1
 8001cde:	8812      	ldrh	r2, [r2, #0]
 8001ce0:	0011      	movs	r1, r2
 8001ce2:	4798      	blx	r3
			}

			return 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e026      	b.n	8001d36 <ShellExec+0x1ba>
	for(uint16_t i = 0 ; i < hShell->funcListSize ; i++) {
 8001ce8:	216a      	movs	r1, #106	; 0x6a
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	881a      	ldrh	r2, [r3, #0]
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	3201      	adds	r2, #1
 8001cf2:	801a      	strh	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	226a      	movs	r2, #106	; 0x6a
 8001cfc:	18ba      	adds	r2, r7, r2
 8001cfe:	8812      	ldrh	r2, [r2, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d200      	bcs.n	8001d06 <ShellExec+0x18a>
 8001d04:	e747      	b.n	8001b96 <ShellExec+0x1a>
		}
	}

	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n%c: no such command\r\n", cmdLine[0]);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4c0d      	ldr	r4, [pc, #52]	; (8001d40 <ShellExec+0x1c4>)
 8001d0a:	1918      	adds	r0, r3, r4
 8001d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <ShellExec+0x1d0>)
 8001d12:	212a      	movs	r1, #42	; 0x2a
 8001d14:	f001 f91e 	bl	8002f54 <sniprintf>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	2162      	movs	r1, #98	; 0x62
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	238e      	movs	r3, #142	; 0x8e
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	58d3      	ldr	r3, [r2, r3]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	1910      	adds	r0, r2, r4
 8001d2c:	187a      	adds	r2, r7, r1
 8001d2e:	8812      	ldrh	r2, [r2, #0]
 8001d30:	0011      	movs	r1, r2
 8001d32:	4798      	blx	r3

	return 255;
 8001d34:	23ff      	movs	r3, #255	; 0xff
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b01d      	add	sp, #116	; 0x74
 8001d3c:	bd90      	pop	{r4, r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	0000020e 	.word	0x0000020e
 8001d44:	08003c08 	.word	0x08003c08
 8001d48:	08003c28 	.word	0x08003c28
 8001d4c:	08003c4c 	.word	0x08003c4c

08001d50 <ShellProcess>:

uint8_t ShellProcess(hShell_t * hShell, char c) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	000a      	movs	r2, r1
 8001d5a:	1cfb      	adds	r3, r7, #3
 8001d5c:	701a      	strb	r2, [r3, #0]
	if (hShell->arrowPending == 0) {
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a71      	ldr	r2, [pc, #452]	; (8001f28 <ShellProcess+0x1d8>)
 8001d62:	5c9b      	ldrb	r3, [r3, r2]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d000      	beq.n	8001d6a <ShellProcess+0x1a>
 8001d68:	e0a7      	b.n	8001eba <ShellProcess+0x16a>
		if (c == '\r') {
 8001d6a:	1cfb      	adds	r3, r7, #3
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b0d      	cmp	r3, #13
 8001d70:	d13b      	bne.n	8001dea <ShellProcess+0x9a>
			hShell->transmitCb("\r\n:", 3);
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	238e      	movs	r3, #142	; 0x8e
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	58d3      	ldr	r3, [r2, r3]
 8001d7a:	4a6c      	ldr	r2, [pc, #432]	; (8001f2c <ShellProcess+0x1dc>)
 8001d7c:	2103      	movs	r1, #3
 8001d7e:	0010      	movs	r0, r2
 8001d80:	4798      	blx	r3
			hShell->transmitCb(hShell->cmdLineBuffer, hShell->cmdLinePosition);
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	238e      	movs	r3, #142	; 0x8e
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	58d3      	ldr	r3, [r2, r3]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	32e5      	adds	r2, #229	; 0xe5
 8001d8e:	32ff      	adds	r2, #255	; 0xff
 8001d90:	0010      	movs	r0, r2
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	228f      	movs	r2, #143	; 0x8f
 8001d96:	0092      	lsls	r2, r2, #2
 8001d98:	5a8a      	ldrh	r2, [r1, r2]
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	4798      	blx	r3
			hShell->transmitCb("\r\n", 2);
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	238e      	movs	r3, #142	; 0x8e
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	58d3      	ldr	r3, [r2, r3]
 8001da6:	4a62      	ldr	r2, [pc, #392]	; (8001f30 <ShellProcess+0x1e0>)
 8001da8:	2102      	movs	r1, #2
 8001daa:	0010      	movs	r0, r2
 8001dac:	4798      	blx	r3

			// Add zero char to be used with newlib functions
			hShell->cmdLineBuffer[hShell->cmdLinePosition] = '\0';
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	238f      	movs	r3, #143	; 0x8f
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	5ad3      	ldrh	r3, [r2, r3]
 8001db6:	0019      	movs	r1, r3
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	23f2      	movs	r3, #242	; 0xf2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	1852      	adds	r2, r2, r1
 8001dc0:	18d3      	adds	r3, r2, r3
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]

			ShellExec(hShell);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7ff fed7 	bl	8001b7c <ShellExec>

			hShell->cmdLinePosition = 0;            //reset buffer
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	238f      	movs	r3, #143	; 0x8f
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	52d1      	strh	r1, [r2, r3]

			hShell->transmitCb("\r\n> ", 4);
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	238e      	movs	r3, #142	; 0x8e
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	58d3      	ldr	r3, [r2, r3]
 8001de0:	4a54      	ldr	r2, [pc, #336]	; (8001f34 <ShellProcess+0x1e4>)
 8001de2:	2104      	movs	r1, #4
 8001de4:	0010      	movs	r0, r2
 8001de6:	4798      	blx	r3
 8001de8:	e098      	b.n	8001f1c <ShellProcess+0x1cc>
		}
		else if (c == '\b') {
 8001dea:	1cfb      	adds	r3, r7, #3
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d125      	bne.n	8001e3e <ShellProcess+0xee>
			if (hShell->cmdLinePosition > 0) {      //is there a char to delete?
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	238f      	movs	r3, #143	; 0x8f
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	5ad3      	ldrh	r3, [r2, r3]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d100      	bne.n	8001e00 <ShellProcess+0xb0>
 8001dfe:	e08d      	b.n	8001f1c <ShellProcess+0x1cc>
				hShell->cmdLinePosition--;          //remove it in buffer
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	238f      	movs	r3, #143	; 0x8f
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	5ad3      	ldrh	r3, [r2, r3]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b299      	uxth	r1, r3
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	238f      	movs	r3, #143	; 0x8f
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	52d1      	strh	r1, [r2, r3]
				hShell->cmdLineBuffer[hShell->cmdLinePosition] = '\0'; //store
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	238f      	movs	r3, #143	; 0x8f
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	5ad3      	ldrh	r3, [r2, r3]
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	23f2      	movs	r3, #242	; 0xf2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	1852      	adds	r2, r2, r1
 8001e26:	18d3      	adds	r3, r2, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]

				hShell->transmitCb("\b \b", 3);
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	238e      	movs	r3, #142	; 0x8e
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	58d3      	ldr	r3, [r2, r3]
 8001e34:	4a40      	ldr	r2, [pc, #256]	; (8001f38 <ShellProcess+0x1e8>)
 8001e36:	2103      	movs	r1, #3
 8001e38:	0010      	movs	r0, r2
 8001e3a:	4798      	blx	r3
 8001e3c:	e06e      	b.n	8001f1c <ShellProcess+0x1cc>
			}
		}
		else if (isChar(c) || isSpace(c)) {
 8001e3e:	1cfb      	adds	r3, r7, #3
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7ff fd64 	bl	8001910 <isChar>
 8001e48:	1e03      	subs	r3, r0, #0
 8001e4a:	d106      	bne.n	8001e5a <ShellProcess+0x10a>
 8001e4c:	1cfb      	adds	r3, r7, #3
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff fd8a 	bl	800196a <isSpace>
 8001e56:	1e03      	subs	r3, r0, #0
 8001e58:	d022      	beq.n	8001ea0 <ShellProcess+0x150>
			//only store characters if buffer has space
			if (hShell->cmdLinePosition < _COMMAND_LINE_SIZE) {
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	238f      	movs	r3, #143	; 0x8f
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	5ad3      	ldrh	r3, [r2, r3]
 8001e62:	2b29      	cmp	r3, #41	; 0x29
 8001e64:	d85a      	bhi.n	8001f1c <ShellProcess+0x1cc>
				hShell->transmitCb((&c), 1);
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	238e      	movs	r3, #142	; 0x8e
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	58d3      	ldr	r3, [r2, r3]
 8001e6e:	1cfa      	adds	r2, r7, #3
 8001e70:	2101      	movs	r1, #1
 8001e72:	0010      	movs	r0, r2
 8001e74:	4798      	blx	r3
				hShell->cmdLineBuffer[hShell->cmdLinePosition++] = c; //store
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	238f      	movs	r3, #143	; 0x8f
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	5ad3      	ldrh	r3, [r2, r3]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	b290      	uxth	r0, r2
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	228f      	movs	r2, #143	; 0x8f
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	5288      	strh	r0, [r1, r2]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	1cfb      	adds	r3, r7, #3
 8001e8e:	7819      	ldrb	r1, [r3, #0]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	23f2      	movs	r3, #242	; 0xf2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	1812      	adds	r2, r2, r0
 8001e98:	18d3      	adds	r3, r2, r3
 8001e9a:	1c0a      	adds	r2, r1, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
			if (hShell->cmdLinePosition < _COMMAND_LINE_SIZE) {
 8001e9e:	e03d      	b.n	8001f1c <ShellProcess+0x1cc>
			}
		}
		else if (c == _ARROW_FIRST) {
 8001ea0:	1cfb      	adds	r3, r7, #3
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b1b      	cmp	r3, #27
 8001ea6:	d139      	bne.n	8001f1c <ShellProcess+0x1cc>
			hShell->arrowPending++;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <ShellProcess+0x1d8>)
 8001eac:	5c9b      	ldrb	r3, [r3, r2]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b2d9      	uxtb	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <ShellProcess+0x1d8>)
 8001eb6:	5499      	strb	r1, [r3, r2]
 8001eb8:	e030      	b.n	8001f1c <ShellProcess+0x1cc>
		//			hShell->cmdLinePosition = 0;            //reset buffer
		//			hShell->transmitCb("\r\n> ", 4);
		//		}
	}
	else {
		if (hShell->arrowPending == 1) {
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <ShellProcess+0x1d8>)
 8001ebe:	5c9b      	ldrb	r3, [r3, r2]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10c      	bne.n	8001ede <ShellProcess+0x18e>
			if (c == _ARROW_SECOND) {
 8001ec4:	1cfb      	adds	r3, r7, #3
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b5b      	cmp	r3, #91	; 0x5b
 8001eca:	d127      	bne.n	8001f1c <ShellProcess+0x1cc>
				hShell->arrowPending++;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <ShellProcess+0x1d8>)
 8001ed0:	5c9b      	ldrb	r3, [r3, r2]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	b2d9      	uxtb	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <ShellProcess+0x1d8>)
 8001eda:	5499      	strb	r1, [r3, r2]
 8001edc:	e01e      	b.n	8001f1c <ShellProcess+0x1cc>
			}
		}
		else if (hShell->arrowPending == 2) {
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <ShellProcess+0x1d8>)
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d119      	bne.n	8001f1c <ShellProcess+0x1cc>
			switch (c) {
 8001ee8:	1cfb      	adds	r3, r7, #3
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b44      	cmp	r3, #68	; 0x44
 8001eee:	d008      	beq.n	8001f02 <ShellProcess+0x1b2>
 8001ef0:	dc09      	bgt.n	8001f06 <ShellProcess+0x1b6>
 8001ef2:	2b43      	cmp	r3, #67	; 0x43
 8001ef4:	d009      	beq.n	8001f0a <ShellProcess+0x1ba>
 8001ef6:	dc06      	bgt.n	8001f06 <ShellProcess+0x1b6>
 8001ef8:	2b41      	cmp	r3, #65	; 0x41
 8001efa:	d008      	beq.n	8001f0e <ShellProcess+0x1be>
 8001efc:	2b42      	cmp	r3, #66	; 0x42
 8001efe:	d008      	beq.n	8001f12 <ShellProcess+0x1c2>
			case _ARROW_THIRD_RIGHT:
				break;
			case _ARROW_THIRD_LEFT:
				break;
			default:
				break;
 8001f00:	e001      	b.n	8001f06 <ShellProcess+0x1b6>
				break;
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	e006      	b.n	8001f14 <ShellProcess+0x1c4>
				break;
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	e004      	b.n	8001f14 <ShellProcess+0x1c4>
				break;
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	e002      	b.n	8001f14 <ShellProcess+0x1c4>
				break;
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	e000      	b.n	8001f14 <ShellProcess+0x1c4>
				break;
 8001f12:	46c0      	nop			; (mov r8, r8)
			}

			hShell->arrowPending = 0;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <ShellProcess+0x1d8>)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]

		}
	}

	return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b002      	add	sp, #8
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	0000023e 	.word	0x0000023e
 8001f2c:	08003c64 	.word	0x08003c64
 8001f30:	08003c68 	.word	0x08003c68
 8001f34:	08003c00 	.word	0x08003c00
 8001f38:	08003c6c 	.word	0x08003c6c

08001f3c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	4252      	negs	r2, r2
 8001f4a:	611a      	str	r2, [r3, #16]
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b002      	add	sp, #8
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001f58:	e7fe      	b.n	8001f58 <NMI_Handler+0x4>

08001f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <HardFault_Handler+0x4>

08001f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE END ADC1_COMP_IRQn 0 */

  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM21);
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <TIM21_IRQHandler+0x24>)
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7ff ffd4 	bl	8001f3c <LL_TIM_ClearFlag_UPDATE>
	// Question 3.3
	LedPulse();
 8001f94:	f7fe fab4 	bl	8000500 <LedPulse>
	count++ ;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <TIM21_IRQHandler+0x28>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <TIM21_IRQHandler+0x28>)
 8001fa2:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM21_IRQn 0 */
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	40010800 	.word	0x40010800
 8001fb0:	20000094 	.word	0x20000094

08001fb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	// Améliration Uart IRQ
	char c = SerialReceiveByte();
 8001fba:	1dfc      	adds	r4, r7, #7
 8001fbc:	f7ff fa7e 	bl	80014bc <SerialReceiveByte>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	7023      	strb	r3, [r4, #0]
	ShellProcess(&hShell, c);
 8001fc4:	1dfb      	adds	r3, r7, #7
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <USART2_IRQHandler+0x28>)
 8001fca:	0011      	movs	r1, r2
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff febf 	bl	8001d50 <ShellProcess>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b003      	add	sp, #12
 8001fd8:	bd90      	pop	{r4, r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	200000b4 	.word	0x200000b4

08001fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <_sbrk+0x5c>)
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <_sbrk+0x60>)
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <_sbrk+0x64>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <_sbrk+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	18d3      	adds	r3, r2, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d207      	bcs.n	8002020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002010:	f000 ff6e 	bl	8002ef0 <__errno>
 8002014:	0003      	movs	r3, r0
 8002016:	220c      	movs	r2, #12
 8002018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201a:	2301      	movs	r3, #1
 800201c:	425b      	negs	r3, r3
 800201e:	e009      	b.n	8002034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	18d2      	adds	r2, r2, r3
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <_sbrk+0x64>)
 8002030:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b006      	add	sp, #24
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000800 	.word	0x20000800
 8002040:	00000200 	.word	0x00000200
 8002044:	20000098 	.word	0x20000098
 8002048:	20000308 	.word	0x20000308

0800204c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <LL_TIM_EnableCounter>:
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2201      	movs	r2, #1
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}

08002072 <LL_TIM_EnableUpdateEvent>:
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2202      	movs	r2, #2
 8002080:	4393      	bics	r3, r2
 8002082:	001a      	movs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	46c0      	nop			; (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}

08002090 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	60da      	str	r2, [r3, #12]
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <TimeBaseStartIT>:

#include "timebase.h"
#include "main.h"

// Initialise le timer
void TimeBaseStartIT(){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	LL_TIM_EnableUpdateEvent(TIM21);
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <TimeBaseStartIT+0x24>)
 80020b2:	0018      	movs	r0, r3
 80020b4:	f7ff ffdd 	bl	8002072 <LL_TIM_EnableUpdateEvent>
	LL_TIM_EnableIT_UPDATE(TIM21);
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <TimeBaseStartIT+0x24>)
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7ff ffe8 	bl	8002090 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM21);
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <TimeBaseStartIT+0x24>)
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff ffc7 	bl	8002056 <LL_TIM_EnableCounter>

}
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	40010800 	.word	0x40010800

080020d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80020d4:	4813      	ldr	r0, [pc, #76]	; (8002124 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80020d6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80020d8:	4813      	ldr	r0, [pc, #76]	; (8002128 <LoopForever+0x6>)
    LDR R1, [R0]
 80020da:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80020dc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <LoopForever+0xa>)
    CMP R1, R2
 80020e0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80020e2:	d105      	bne.n	80020f0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80020e4:	4812      	ldr	r0, [pc, #72]	; (8002130 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80020e6:	4913      	ldr	r1, [pc, #76]	; (8002134 <LoopForever+0x12>)
    STR R1, [R0]
 80020e8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80020ea:	4813      	ldr	r0, [pc, #76]	; (8002138 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80020ec:	4913      	ldr	r1, [pc, #76]	; (800213c <LoopForever+0x1a>)
    STR R1, [R0]
 80020ee:	6001      	str	r1, [r0, #0]

080020f0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f0:	4813      	ldr	r0, [pc, #76]	; (8002140 <LoopForever+0x1e>)
  ldr r1, =_edata
 80020f2:	4914      	ldr	r1, [pc, #80]	; (8002144 <LoopForever+0x22>)
  ldr r2, =_sidata
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <LoopForever+0x26>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a11      	ldr	r2, [pc, #68]	; (800214c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002108:	4c11      	ldr	r4, [pc, #68]	; (8002150 <LoopForever+0x2e>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002116:	f7ff ff99 	bl	800204c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800211a:	f000 feef 	bl	8002efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211e:	f7fe fdf3 	bl	8000d08 <main>

08002122 <LoopForever>:

LoopForever:
    b LoopForever
 8002122:	e7fe      	b.n	8002122 <LoopForever>
   ldr   r0, =_estack
 8002124:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8002128:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800212c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002130:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002134:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002138:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800213c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002148:	08003de0 	.word	0x08003de0
  ldr r2, =_sbss
 800214c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002150:	20000304 	.word	0x20000304

08002154 <AES_LPUART1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <AES_LPUART1_IRQHandler>

08002156 <LL_ADC_IsEnabled>:
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2201      	movs	r2, #1
 8002164:	4013      	ands	r3, r2
 8002166:	3b01      	subs	r3, #1
 8002168:	425a      	negs	r2, r3
 800216a:	4153      	adcs	r3, r2
 800216c:	b2db      	uxtb	r3, r3
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b002      	add	sp, #8
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002182:	230f      	movs	r3, #15
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff ffe2 	bl	8002156 <LL_ADC_IsEnabled>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d118      	bne.n	80021c8 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <LL_ADC_Init+0x68>)
 800219c:	401a      	ands	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	4319      	orrs	r1, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	089a      	lsrs	r2, r3, #2
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	e003      	b.n	80021d0 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80021c8:	230f      	movs	r3, #15
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80021d0:	230f      	movs	r3, #15
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	781b      	ldrb	r3, [r3, #0]
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b004      	add	sp, #16
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	ffff3fc7 	.word	0xffff3fc7

080021e4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80021ee:	230f      	movs	r3, #15
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7ff ffac 	bl	8002156 <LL_ADC_IsEnabled>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d115      	bne.n	800222e <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <LL_ADC_REG_Init+0x60>)
 8002208:	401a      	ands	r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6819      	ldr	r1, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4319      	orrs	r1, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4319      	orrs	r1, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	4319      	orrs	r1, r3
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	430b      	orrs	r3, r1
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	e003      	b.n	8002236 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800222e:	230f      	movs	r3, #15
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002236:	230f      	movs	r3, #15
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	781b      	ldrb	r3, [r3, #0]
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	b004      	add	sp, #16
 8002242:	bd80      	pop	{r7, pc}
 8002244:	fffec23c 	.word	0xfffec23c

08002248 <LL_GPIO_SetPinMode>:
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6819      	ldr	r1, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	435b      	muls	r3, r3
 800225c:	001a      	movs	r2, r3
 800225e:	0013      	movs	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	189b      	adds	r3, r3, r2
 8002264:	43db      	mvns	r3, r3
 8002266:	400b      	ands	r3, r1
 8002268:	001a      	movs	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	435b      	muls	r3, r3
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	434b      	muls	r3, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	601a      	str	r2, [r3, #0]
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}

08002280 <LL_GPIO_SetPinOutputType>:
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	43d2      	mvns	r2, r2
 8002294:	401a      	ands	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	434b      	muls	r3, r1
 800229c:	431a      	orrs	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	605a      	str	r2, [r3, #4]
}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b004      	add	sp, #16
 80022a8:	bd80      	pop	{r7, pc}

080022aa <LL_GPIO_SetPinSpeed>:
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	435b      	muls	r3, r3
 80022be:	001a      	movs	r2, r3
 80022c0:	0013      	movs	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	189b      	adds	r3, r3, r2
 80022c6:	43db      	mvns	r3, r3
 80022c8:	400b      	ands	r3, r1
 80022ca:	001a      	movs	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	435b      	muls	r3, r3
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	434b      	muls	r3, r1
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	609a      	str	r2, [r3, #8]
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b004      	add	sp, #16
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <LL_GPIO_SetPinPull>:
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68d9      	ldr	r1, [r3, #12]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	435b      	muls	r3, r3
 80022f6:	001a      	movs	r2, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	189b      	adds	r3, r3, r2
 80022fe:	43db      	mvns	r3, r3
 8002300:	400b      	ands	r3, r1
 8002302:	001a      	movs	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	435b      	muls	r3, r3
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	434b      	muls	r3, r1
 800230c:	431a      	orrs	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	60da      	str	r2, [r3, #12]
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}

0800231a <LL_GPIO_SetAFPin_0_7>:
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a19      	ldr	r1, [r3, #32]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	435b      	muls	r3, r3
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4353      	muls	r3, r2
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	435a      	muls	r2, r3
 8002336:	0013      	movs	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	43db      	mvns	r3, r3
 800233e:	400b      	ands	r3, r1
 8002340:	001a      	movs	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	435b      	muls	r3, r3
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	434b      	muls	r3, r1
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	434b      	muls	r3, r1
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	434b      	muls	r3, r1
 8002352:	431a      	orrs	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	621a      	str	r2, [r3, #32]
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}

08002360 <LL_GPIO_SetAFPin_8_15>:
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	0a12      	lsrs	r2, r2, #8
 8002378:	4353      	muls	r3, r2
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	0a12      	lsrs	r2, r2, #8
 800237e:	4353      	muls	r3, r2
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	0a12      	lsrs	r2, r2, #8
 8002384:	435a      	muls	r2, r3
 8002386:	0013      	movs	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	43db      	mvns	r3, r3
 800238e:	400b      	ands	r3, r1
 8002390:	001a      	movs	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	0a09      	lsrs	r1, r1, #8
 800239a:	434b      	muls	r3, r1
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	0a09      	lsrs	r1, r1, #8
 80023a0:	434b      	muls	r3, r1
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	0a09      	lsrs	r1, r1, #8
 80023a6:	434b      	muls	r3, r1
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	434b      	muls	r3, r1
 80023ac:	431a      	orrs	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b004      	add	sp, #16
 80023b8:	bd80      	pop	{r7, pc}

080023ba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80023cc:	e048      	b.n	8002460 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2101      	movs	r1, #1
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4091      	lsls	r1, r2
 80023d8:	000a      	movs	r2, r1
 80023da:	4013      	ands	r3, r2
 80023dc:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d03a      	beq.n	800245a <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d003      	beq.n	80023f4 <LL_GPIO_Init+0x3a>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d10e      	bne.n	8002412 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff ff54 	bl	80022aa <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0018      	movs	r0, r3
 800240e:	f7ff ff37 	bl	8002280 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	0018      	movs	r0, r3
 800241c:	f7ff ff61 	bl	80022e2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d111      	bne.n	800244c <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2bff      	cmp	r3, #255	; 0xff
 800242c:	d807      	bhi.n	800243e <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff ff6f 	bl	800231a <LL_GPIO_SetAFPin_0_7>
 800243c:	e006      	b.n	800244c <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0018      	movs	r0, r3
 8002448:	f7ff ff8a 	bl	8002360 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff fef7 	bl	8002248 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3301      	adds	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	40da      	lsrs	r2, r3
 8002468:	1e13      	subs	r3, r2, #0
 800246a:	d1b0      	bne.n	80023ce <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 800246c:	2300      	movs	r3, #0
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b004      	add	sp, #16
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <LL_RCC_HSI_IsReady>:
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <LL_RCC_HSI_IsReady+0x1c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2204      	movs	r2, #4
 8002482:	4013      	ands	r3, r2
 8002484:	2b04      	cmp	r3, #4
 8002486:	d101      	bne.n	800248c <LL_RCC_HSI_IsReady+0x14>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <LL_RCC_HSI_IsReady+0x16>
 800248c:	2300      	movs	r3, #0
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000

08002498 <LL_RCC_LSE_IsReady>:
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <LL_RCC_LSE_IsReady+0x24>)
 800249e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	401a      	ands	r2, r3
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d101      	bne.n	80024b2 <LL_RCC_LSE_IsReady+0x1a>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <LL_RCC_LSE_IsReady+0x1c>
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	40021000 	.word	0x40021000

080024c0 <LL_RCC_MSI_GetRange>:
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <LL_RCC_MSI_GetRange+0x14>)
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	23e0      	movs	r3, #224	; 0xe0
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	4013      	ands	r3, r2
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000

080024d8 <LL_RCC_GetSysClkSource>:
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <LL_RCC_GetSysClkSource+0x14>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	220c      	movs	r2, #12
 80024e2:	4013      	ands	r3, r2
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	40021000 	.word	0x40021000

080024f0 <LL_RCC_GetAHBPrescaler>:
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <LL_RCC_GetAHBPrescaler+0x14>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	22f0      	movs	r2, #240	; 0xf0
 80024fa:	4013      	ands	r3, r2
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	40021000 	.word	0x40021000

08002508 <LL_RCC_GetAPB1Prescaler>:
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <LL_RCC_GetAPB1Prescaler+0x14>)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	23e0      	movs	r3, #224	; 0xe0
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4013      	ands	r3, r2
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000

08002520 <LL_RCC_GetUSARTClockSource>:
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <LL_RCC_GetUSARTClockSource+0x20>)
 800252a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	401a      	ands	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	4313      	orrs	r3, r2
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b002      	add	sp, #8
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	40021000 	.word	0x40021000

08002544 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <LL_RCC_PLL_GetMainSource+0x14>)
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	025b      	lsls	r3, r3, #9
 8002550:	4013      	ands	r3, r2
}
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000

0800255c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	23f0      	movs	r3, #240	; 0xf0
 8002566:	039b      	lsls	r3, r3, #14
 8002568:	4013      	ands	r3, r2
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000

08002574 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <LL_RCC_PLL_GetDivider+0x14>)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	23c0      	movs	r3, #192	; 0xc0
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	4013      	ands	r3, r2
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000

0800258c <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2210      	movs	r2, #16
 8002596:	4013      	ands	r3, r2
 8002598:	2b10      	cmp	r3, #16
 800259a:	d101      	bne.n	80025a0 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000

080025ac <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d139      	bne.n	8002632 <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7ff ffad 	bl	8002520 <LL_RCC_GetUSARTClockSource>
 80025c6:	0003      	movs	r3, r0
 80025c8:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <LL_RCC_GetUSARTClockFreq+0x9c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01c      	beq.n	8002608 <LL_RCC_GetUSARTClockFreq+0x5c>
 80025ce:	4a1e      	ldr	r2, [pc, #120]	; (8002648 <LL_RCC_GetUSARTClockFreq+0x9c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d821      	bhi.n	8002618 <LL_RCC_GetUSARTClockFreq+0x6c>
 80025d4:	4a1d      	ldr	r2, [pc, #116]	; (800264c <LL_RCC_GetUSARTClockFreq+0xa0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d003      	beq.n	80025e2 <LL_RCC_GetUSARTClockFreq+0x36>
 80025da:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <LL_RCC_GetUSARTClockFreq+0xa4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d005      	beq.n	80025ec <LL_RCC_GetUSARTClockFreq+0x40>
 80025e0:	e01a      	b.n	8002618 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80025e2:	f000 f83b 	bl	800265c <RCC_GetSystemClockFreq>
 80025e6:	0003      	movs	r3, r0
 80025e8:	60fb      	str	r3, [r7, #12]
        break;
 80025ea:	e027      	b.n	800263c <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80025ec:	f7ff ff44 	bl	8002478 <LL_RCC_HSI_IsReady>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d020      	beq.n	8002636 <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80025f4:	f7ff ffca 	bl	800258c <LL_RCC_IsActiveFlag_HSIDIV>
 80025f8:	1e03      	subs	r3, r0, #0
 80025fa:	d002      	beq.n	8002602 <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <LL_RCC_GetUSARTClockFreq+0xa8>)
 80025fe:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8002600:	e019      	b.n	8002636 <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <LL_RCC_GetUSARTClockFreq+0xac>)
 8002604:	60fb      	str	r3, [r7, #12]
        break;
 8002606:	e016      	b.n	8002636 <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002608:	f7ff ff46 	bl	8002498 <LL_RCC_LSE_IsReady>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d014      	beq.n	800263a <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002616:	e010      	b.n	800263a <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002618:	f000 f820 	bl	800265c <RCC_GetSystemClockFreq>
 800261c:	0003      	movs	r3, r0
 800261e:	0018      	movs	r0, r3
 8002620:	f000 f860 	bl	80026e4 <RCC_GetHCLKClockFreq>
 8002624:	0003      	movs	r3, r0
 8002626:	0018      	movs	r0, r3
 8002628:	f000 f872 	bl	8002710 <RCC_GetPCLK1ClockFreq>
 800262c:	0003      	movs	r3, r0
 800262e:	60fb      	str	r3, [r7, #12]
        break;
 8002630:	e004      	b.n	800263c <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	e002      	b.n	800263c <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	e000      	b.n	800263c <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 800263a:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 800263c:	68fb      	ldr	r3, [r7, #12]
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b004      	add	sp, #16
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	000c000c 	.word	0x000c000c
 800264c:	000c0004 	.word	0x000c0004
 8002650:	000c0008 	.word	0x000c0008
 8002654:	003d0900 	.word	0x003d0900
 8002658:	00f42400 	.word	0x00f42400

0800265c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002662:	f7ff ff39 	bl	80024d8 <LL_RCC_GetSysClkSource>
 8002666:	0003      	movs	r3, r0
 8002668:	2b0c      	cmp	r3, #12
 800266a:	d020      	beq.n	80026ae <RCC_GetSystemClockFreq+0x52>
 800266c:	d824      	bhi.n	80026b8 <RCC_GetSystemClockFreq+0x5c>
 800266e:	2b08      	cmp	r3, #8
 8002670:	d01a      	beq.n	80026a8 <RCC_GetSystemClockFreq+0x4c>
 8002672:	d821      	bhi.n	80026b8 <RCC_GetSystemClockFreq+0x5c>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <RCC_GetSystemClockFreq+0x22>
 8002678:	2b04      	cmp	r3, #4
 800267a:	d00b      	beq.n	8002694 <RCC_GetSystemClockFreq+0x38>
 800267c:	e01c      	b.n	80026b8 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800267e:	f7ff ff1f 	bl	80024c0 <LL_RCC_MSI_GetRange>
 8002682:	0003      	movs	r3, r0
 8002684:	0b5b      	lsrs	r3, r3, #13
 8002686:	3301      	adds	r3, #1
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	0212      	lsls	r2, r2, #8
 800268c:	409a      	lsls	r2, r3
 800268e:	0013      	movs	r3, r2
 8002690:	607b      	str	r3, [r7, #4]
      break;
 8002692:	e01c      	b.n	80026ce <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002694:	f7ff ff7a 	bl	800258c <LL_RCC_IsActiveFlag_HSIDIV>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d002      	beq.n	80026a2 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <RCC_GetSystemClockFreq+0x7c>)
 800269e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 80026a0:	e015      	b.n	80026ce <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <RCC_GetSystemClockFreq+0x80>)
 80026a4:	607b      	str	r3, [r7, #4]
      break;
 80026a6:	e012      	b.n	80026ce <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <RCC_GetSystemClockFreq+0x84>)
 80026aa:	607b      	str	r3, [r7, #4]
      break;
 80026ac:	e00f      	b.n	80026ce <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80026ae:	f000 f843 	bl	8002738 <RCC_PLL_GetFreqDomain_SYS>
 80026b2:	0003      	movs	r3, r0
 80026b4:	607b      	str	r3, [r7, #4]
      break;
 80026b6:	e00a      	b.n	80026ce <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80026b8:	f7ff ff02 	bl	80024c0 <LL_RCC_MSI_GetRange>
 80026bc:	0003      	movs	r3, r0
 80026be:	0b5b      	lsrs	r3, r3, #13
 80026c0:	3301      	adds	r3, #1
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	0212      	lsls	r2, r2, #8
 80026c6:	409a      	lsls	r2, r3
 80026c8:	0013      	movs	r3, r2
 80026ca:	607b      	str	r3, [r7, #4]
      break;
 80026cc:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80026ce:	687b      	ldr	r3, [r7, #4]
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	003d0900 	.word	0x003d0900
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	007a1200 	.word	0x007a1200

080026e4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80026ec:	f7ff ff00 	bl	80024f0 <LL_RCC_GetAHBPrescaler>
 80026f0:	0003      	movs	r3, r0
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	220f      	movs	r2, #15
 80026f6:	4013      	ands	r3, r2
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <RCC_GetHCLKClockFreq+0x28>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	001a      	movs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	40d3      	lsrs	r3, r2
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b002      	add	sp, #8
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	08003c80 	.word	0x08003c80

08002710 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002718:	f7ff fef6 	bl	8002508 <LL_RCC_GetAPB1Prescaler>
 800271c:	0003      	movs	r3, r0
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <RCC_GetPCLK1ClockFreq+0x24>)
 8002722:	5cd3      	ldrb	r3, [r2, r3]
 8002724:	001a      	movs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	40d3      	lsrs	r3, r2
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	08003c90 	.word	0x08003c90

08002738 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800273e:	f7ff ff01 	bl	8002544 <LL_RCC_PLL_GetMainSource>
 8002742:	0003      	movs	r3, r0
 8002744:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800274c:	f7ff ff1e 	bl	800258c <LL_RCC_IsActiveFlag_HSIDIV>
 8002750:	1e03      	subs	r3, r0, #0
 8002752:	d002      	beq.n	800275a <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002756:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8002758:	e005      	b.n	8002766 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800275c:	607b      	str	r3, [r7, #4]
      break;
 800275e:	e002      	b.n	8002766 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8002762:	607b      	str	r3, [r7, #4]
      break;
 8002764:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8002766:	f7ff fef9 	bl	800255c <LL_RCC_PLL_GetMultiplicator>
 800276a:	0003      	movs	r3, r0
 800276c:	0c9b      	lsrs	r3, r3, #18
 800276e:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002770:	5cd3      	ldrb	r3, [r2, r3]
 8002772:	001a      	movs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4353      	muls	r3, r2
 8002778:	001c      	movs	r4, r3
 800277a:	f7ff fefb 	bl	8002574 <LL_RCC_PLL_GetDivider>
 800277e:	0003      	movs	r3, r0
 8002780:	0d9b      	lsrs	r3, r3, #22
 8002782:	3301      	adds	r3, #1
 8002784:	0019      	movs	r1, r3
 8002786:	0020      	movs	r0, r4
 8002788:	f7fd fcc8 	bl	800011c <__udivsi3>
 800278c:	0003      	movs	r3, r0
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b003      	add	sp, #12
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	003d0900 	.word	0x003d0900
 800279c:	00f42400 	.word	0x00f42400
 80027a0:	007a1200 	.word	0x007a1200
 80027a4:	08003c98 	.word	0x08003c98

080027a8 <LL_SPI_IsEnabled>:
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2240      	movs	r2, #64	; 0x40
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b40      	cmp	r3, #64	; 0x40
 80027ba:	d101      	bne.n	80027c0 <LL_SPI_IsEnabled+0x18>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <LL_SPI_IsEnabled+0x1a>
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b002      	add	sp, #8
 80027c8:	bd80      	pop	{r7, pc}

080027ca <LL_SPI_SetCRCPolynomial>:
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	001a      	movs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]
}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b002      	add	sp, #8
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80027f2:	230f      	movs	r3, #15
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7ff ffd3 	bl	80027a8 <LL_SPI_IsEnabled>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d13c      	bne.n	8002880 <LL_SPI_Init+0x98>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a21      	ldr	r2, [pc, #132]	; (8002890 <LL_SPI_Init+0xa8>)
 800280c:	401a      	ands	r2, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6819      	ldr	r1, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4319      	orrs	r1, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4319      	orrs	r1, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4319      	orrs	r1, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	4319      	orrs	r1, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4319      	orrs	r1, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	4319      	orrs	r1, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4319      	orrs	r1, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	430b      	orrs	r3, r1
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2204      	movs	r2, #4
 800284e:	4393      	bics	r3, r2
 8002850:	001a      	movs	r2, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	0c1b      	lsrs	r3, r3, #16
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6a1a      	ldr	r2, [r3, #32]
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	019b      	lsls	r3, r3, #6
 8002866:	429a      	cmp	r2, r3
 8002868:	d106      	bne.n	8002878 <LL_SPI_Init+0x90>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0011      	movs	r1, r2
 8002872:	0018      	movs	r0, r3
 8002874:	f7ff ffa9 	bl	80027ca <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002878:	230f      	movs	r3, #15
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8002880:	230f      	movs	r3, #15
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	781b      	ldrb	r3, [r3, #0]
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	ffff0040 	.word	0xffff0040

08002894 <LL_TIM_SetPrescaler>:
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b002      	add	sp, #8
 80028aa:	bd80      	pop	{r7, pc}

080028ac <LL_TIM_SetAutoReload>:
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b002      	add	sp, #8
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <LL_TIM_OC_SetCompareCH1>:
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <LL_TIM_OC_SetCompareCH2>:
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <LL_TIM_OC_SetCompareCH3>:
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b002      	add	sp, #8
 800290a:	bd80      	pop	{r7, pc}

0800290c <LL_TIM_OC_SetCompareCH4>:
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}

08002924 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	2201      	movs	r2, #1
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	615a      	str	r2, [r3, #20]
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}

08002940 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	05db      	lsls	r3, r3, #23
 8002956:	429a      	cmp	r2, r3
 8002958:	d003      	beq.n	8002962 <LL_TIM_Init+0x22>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a1a      	ldr	r2, [pc, #104]	; (80029c8 <LL_TIM_Init+0x88>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d107      	bne.n	8002972 <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2270      	movs	r2, #112	; 0x70
 8002966:	4393      	bics	r3, r2
 8002968:	001a      	movs	r2, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	05db      	lsls	r3, r3, #23
 8002978:	429a      	cmp	r2, r3
 800297a:	d003      	beq.n	8002984 <LL_TIM_Init+0x44>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <LL_TIM_Init+0x88>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d106      	bne.n	8002992 <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a11      	ldr	r2, [pc, #68]	; (80029cc <LL_TIM_Init+0x8c>)
 8002988:	401a      	ands	r2, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	0011      	movs	r1, r2
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7ff ff83 	bl	80028ac <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	001a      	movs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7ff ff6f 	bl	8002894 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7ff ffb3 	bl	8002924 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b004      	add	sp, #16
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40010800 	.word	0x40010800
 80029cc:	fffffcff 	.word	0xfffffcff

080029d0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80029dc:	2317      	movs	r3, #23
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	015b      	lsls	r3, r3, #5
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d036      	beq.n	8002a5c <LL_TIM_OC_Init+0x8c>
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	015b      	lsls	r3, r3, #5
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d83c      	bhi.n	8002a72 <LL_TIM_OC_Init+0xa2>
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d021      	beq.n	8002a46 <LL_TIM_OC_Init+0x76>
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d832      	bhi.n	8002a72 <LL_TIM_OC_Init+0xa2>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d003      	beq.n	8002a1a <LL_TIM_OC_Init+0x4a>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d00b      	beq.n	8002a30 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002a18:	e02b      	b.n	8002a72 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002a1a:	2317      	movs	r3, #23
 8002a1c:	18fc      	adds	r4, r7, r3
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	0011      	movs	r1, r2
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 f82c 	bl	8002a82 <OC1Config>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	7023      	strb	r3, [r4, #0]
      break;
 8002a2e:	e021      	b.n	8002a74 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002a30:	2317      	movs	r3, #23
 8002a32:	18fc      	adds	r4, r7, r3
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	0011      	movs	r1, r2
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 f868 	bl	8002b10 <OC2Config>
 8002a40:	0003      	movs	r3, r0
 8002a42:	7023      	strb	r3, [r4, #0]
      break;
 8002a44:	e016      	b.n	8002a74 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002a46:	2317      	movs	r3, #23
 8002a48:	18fc      	adds	r4, r7, r3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f8a9 	bl	8002ba8 <OC3Config>
 8002a56:	0003      	movs	r3, r0
 8002a58:	7023      	strb	r3, [r4, #0]
      break;
 8002a5a:	e00b      	b.n	8002a74 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002a5c:	2317      	movs	r3, #23
 8002a5e:	18fc      	adds	r4, r7, r3
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0011      	movs	r1, r2
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 f8e8 	bl	8002c3c <OC4Config>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	7023      	strb	r3, [r4, #0]
      break;
 8002a70:	e000      	b.n	8002a74 <LL_TIM_OC_Init+0xa4>
      break;
 8002a72:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002a74:	2317      	movs	r3, #23
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	781b      	ldrb	r3, [r3, #0]
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b007      	add	sp, #28
 8002a80:	bd90      	pop	{r4, r7, pc}

08002a82 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	2201      	movs	r2, #1
 8002a92:	4393      	bics	r3, r2
 8002a94:	001a      	movs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2203      	movs	r2, #3
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2270      	movs	r2, #112	; 0x70
 8002ab8:	4393      	bics	r3, r2
 8002aba:	001a      	movs	r2, r3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	4393      	bics	r3, r2
 8002aca:	001a      	movs	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4393      	bics	r3, r2
 8002ada:	001a      	movs	r2, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff fee3 	bl	80028c4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b006      	add	sp, #24
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	2210      	movs	r2, #16
 8002b20:	4393      	bics	r3, r2
 8002b22:	001a      	movs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <OC2Config+0x90>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <OC2Config+0x94>)
 8002b46:	401a      	ands	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2220      	movs	r2, #32
 8002b56:	4393      	bics	r3, r2
 8002b58:	001a      	movs	r2, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2210      	movs	r2, #16
 8002b68:	4393      	bics	r3, r2
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0011      	movs	r1, r2
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f7ff fea6 	bl	80028dc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	0018      	movs	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b006      	add	sp, #24
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	fffffcff 	.word	0xfffffcff
 8002ba4:	ffff8fff 	.word	0xffff8fff

08002ba8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <OC3Config+0x8c>)
 8002bb8:	401a      	ands	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2270      	movs	r2, #112	; 0x70
 8002bdc:	4393      	bics	r3, r2
 8002bde:	001a      	movs	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <OC3Config+0x90>)
 8002bec:	401a      	ands	r2, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <OC3Config+0x8c>)
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	0011      	movs	r1, r2
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7ff fe69 	bl	80028f4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b006      	add	sp, #24
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	fffffeff 	.word	0xfffffeff
 8002c38:	fffffdff 	.word	0xfffffdff

08002c3c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <OC4Config+0x8c>)
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4a19      	ldr	r2, [pc, #100]	; (8002ccc <OC4Config+0x90>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <OC4Config+0x94>)
 8002c70:	401a      	ands	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <OC4Config+0x98>)
 8002c80:	401a      	ands	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	031b      	lsls	r3, r3, #12
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <OC4Config+0x8c>)
 8002c90:	401a      	ands	r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	031b      	lsls	r3, r3, #12
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	0011      	movs	r1, r2
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7ff fe2b 	bl	800290c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b006      	add	sp, #24
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	ffffefff 	.word	0xffffefff
 8002ccc:	fffffcff 	.word	0xfffffcff
 8002cd0:	ffff8fff 	.word	0xffff8fff
 8002cd4:	ffffdfff 	.word	0xffffdfff

08002cd8 <LL_USART_IsEnabled>:
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <LL_USART_IsEnabled+0x18>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_USART_IsEnabled+0x1a>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <LL_USART_SetStopBitsLength>:
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <LL_USART_SetStopBitsLength+0x24>)
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	605a      	str	r2, [r3, #4]
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	ffffcfff 	.word	0xffffcfff

08002d24 <LL_USART_SetHWFlowCtrl>:
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <LL_USART_SetHWFlowCtrl+0x24>)
 8002d34:	401a      	ands	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b002      	add	sp, #8
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	fffffcff 	.word	0xfffffcff

08002d4c <LL_USART_SetBaudRate>:
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d11c      	bne.n	8002d9e <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	005a      	lsls	r2, r3, #1
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	18d3      	adds	r3, r2, r3
 8002d6e:	6839      	ldr	r1, [r7, #0]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f7fd f9d3 	bl	800011c <__udivsi3>
 8002d76:	0003      	movs	r3, r0
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <LL_USART_SetBaudRate+0x74>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	2307      	movs	r3, #7
 8002d8e:	4013      	ands	r3, r2
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	60da      	str	r2, [r3, #12]
}
 8002d9c:	e00c      	b.n	8002db8 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	085a      	lsrs	r2, r3, #1
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	18d3      	adds	r3, r2, r3
 8002da6:	6839      	ldr	r1, [r7, #0]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7fd f9b7 	bl	800011c <__udivsi3>
 8002dae:	0003      	movs	r3, r0
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	001a      	movs	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	60da      	str	r2, [r3, #12]
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b006      	add	sp, #24
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	0000fff0 	.word	0x0000fff0

08002dc4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002dce:	230f      	movs	r3, #15
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7ff ff7b 	bl	8002cd8 <LL_USART_IsEnabled>
 8002de2:	1e03      	subs	r3, r0, #0
 8002de4:	d13b      	bne.n	8002e5e <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <LL_USART_Init+0xa8>)
 8002dec:	401a      	ands	r2, r3
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4319      	orrs	r1, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	4319      	orrs	r1, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	430b      	orrs	r3, r1
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	0011      	movs	r1, r2
 8002e12:	0018      	movs	r0, r3
 8002e14:	f7ff ff72 	bl	8002cfc <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	0011      	movs	r1, r2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7ff ff7f 	bl	8002d24 <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a11      	ldr	r2, [pc, #68]	; (8002e70 <LL_USART_Init+0xac>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d104      	bne.n	8002e38 <LL_USART_Init+0x74>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002e2e:	200c      	movs	r0, #12
 8002e30:	f7ff fbbc 	bl	80025ac <LL_RCC_GetUSARTClockFreq>
 8002e34:	0003      	movs	r3, r0
 8002e36:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00f      	beq.n	8002e5e <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 8002e46:	230f      	movs	r3, #15
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff77 	bl	8002d4c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002e5e:	230f      	movs	r3, #15
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	781b      	ldrb	r3, [r3, #0]
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b004      	add	sp, #16
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	efff69f3 	.word	0xefff69f3
 8002e70:	40004400 	.word	0x40004400

08002e74 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002e7e:	6839      	ldr	r1, [r7, #0]
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fd f94b 	bl	800011c <__udivsi3>
 8002e86:	0003      	movs	r3, r0
 8002e88:	001a      	movs	r2, r3
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <LL_InitTick+0x30>)
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <LL_InitTick+0x30>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e96:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <LL_InitTick+0x30>)
 8002e98:	2205      	movs	r2, #5
 8002e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002eb0:	23fa      	movs	r3, #250	; 0xfa
 8002eb2:	009a      	lsls	r2, r3, #2
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0011      	movs	r1, r2
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7ff ffdb 	bl	8002e74 <LL_InitTick>
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <LL_SetSystemCoreClock+0x18>)
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b002      	add	sp, #8
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000008 	.word	0x20000008

08002ee4 <atoi>:
 8002ee4:	b510      	push	{r4, lr}
 8002ee6:	220a      	movs	r2, #10
 8002ee8:	2100      	movs	r1, #0
 8002eea:	f000 f8f5 	bl	80030d8 <strtol>
 8002eee:	bd10      	pop	{r4, pc}

08002ef0 <__errno>:
 8002ef0:	4b01      	ldr	r3, [pc, #4]	; (8002ef8 <__errno+0x8>)
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	4770      	bx	lr
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	2000000c 	.word	0x2000000c

08002efc <__libc_init_array>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	2600      	movs	r6, #0
 8002f00:	4d0c      	ldr	r5, [pc, #48]	; (8002f34 <__libc_init_array+0x38>)
 8002f02:	4c0d      	ldr	r4, [pc, #52]	; (8002f38 <__libc_init_array+0x3c>)
 8002f04:	1b64      	subs	r4, r4, r5
 8002f06:	10a4      	asrs	r4, r4, #2
 8002f08:	42a6      	cmp	r6, r4
 8002f0a:	d109      	bne.n	8002f20 <__libc_init_array+0x24>
 8002f0c:	2600      	movs	r6, #0
 8002f0e:	f000 fcf5 	bl	80038fc <_init>
 8002f12:	4d0a      	ldr	r5, [pc, #40]	; (8002f3c <__libc_init_array+0x40>)
 8002f14:	4c0a      	ldr	r4, [pc, #40]	; (8002f40 <__libc_init_array+0x44>)
 8002f16:	1b64      	subs	r4, r4, r5
 8002f18:	10a4      	asrs	r4, r4, #2
 8002f1a:	42a6      	cmp	r6, r4
 8002f1c:	d105      	bne.n	8002f2a <__libc_init_array+0x2e>
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	00b3      	lsls	r3, r6, #2
 8002f22:	58eb      	ldr	r3, [r5, r3]
 8002f24:	4798      	blx	r3
 8002f26:	3601      	adds	r6, #1
 8002f28:	e7ee      	b.n	8002f08 <__libc_init_array+0xc>
 8002f2a:	00b3      	lsls	r3, r6, #2
 8002f2c:	58eb      	ldr	r3, [r5, r3]
 8002f2e:	4798      	blx	r3
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7f2      	b.n	8002f1a <__libc_init_array+0x1e>
 8002f34:	08003dd8 	.word	0x08003dd8
 8002f38:	08003dd8 	.word	0x08003dd8
 8002f3c:	08003dd8 	.word	0x08003dd8
 8002f40:	08003ddc 	.word	0x08003ddc

08002f44 <memset>:
 8002f44:	0003      	movs	r3, r0
 8002f46:	1882      	adds	r2, r0, r2
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d100      	bne.n	8002f4e <memset+0xa>
 8002f4c:	4770      	bx	lr
 8002f4e:	7019      	strb	r1, [r3, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	e7f9      	b.n	8002f48 <memset+0x4>

08002f54 <sniprintf>:
 8002f54:	b40c      	push	{r2, r3}
 8002f56:	b530      	push	{r4, r5, lr}
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <sniprintf+0x64>)
 8002f5a:	000c      	movs	r4, r1
 8002f5c:	681d      	ldr	r5, [r3, #0]
 8002f5e:	b09d      	sub	sp, #116	; 0x74
 8002f60:	2900      	cmp	r1, #0
 8002f62:	da08      	bge.n	8002f76 <sniprintf+0x22>
 8002f64:	238b      	movs	r3, #139	; 0x8b
 8002f66:	2001      	movs	r0, #1
 8002f68:	602b      	str	r3, [r5, #0]
 8002f6a:	4240      	negs	r0, r0
 8002f6c:	b01d      	add	sp, #116	; 0x74
 8002f6e:	bc30      	pop	{r4, r5}
 8002f70:	bc08      	pop	{r3}
 8002f72:	b002      	add	sp, #8
 8002f74:	4718      	bx	r3
 8002f76:	2382      	movs	r3, #130	; 0x82
 8002f78:	466a      	mov	r2, sp
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	8293      	strh	r3, [r2, #20]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	9002      	str	r0, [sp, #8]
 8002f82:	9006      	str	r0, [sp, #24]
 8002f84:	4299      	cmp	r1, r3
 8002f86:	d000      	beq.n	8002f8a <sniprintf+0x36>
 8002f88:	1e4b      	subs	r3, r1, #1
 8002f8a:	9304      	str	r3, [sp, #16]
 8002f8c:	9307      	str	r3, [sp, #28]
 8002f8e:	2301      	movs	r3, #1
 8002f90:	466a      	mov	r2, sp
 8002f92:	425b      	negs	r3, r3
 8002f94:	82d3      	strh	r3, [r2, #22]
 8002f96:	0028      	movs	r0, r5
 8002f98:	ab21      	add	r3, sp, #132	; 0x84
 8002f9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f9c:	a902      	add	r1, sp, #8
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	f000 f908 	bl	80031b4 <_svfiprintf_r>
 8002fa4:	1c43      	adds	r3, r0, #1
 8002fa6:	da01      	bge.n	8002fac <sniprintf+0x58>
 8002fa8:	238b      	movs	r3, #139	; 0x8b
 8002faa:	602b      	str	r3, [r5, #0]
 8002fac:	2c00      	cmp	r4, #0
 8002fae:	d0dd      	beq.n	8002f6c <sniprintf+0x18>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	9a02      	ldr	r2, [sp, #8]
 8002fb4:	7013      	strb	r3, [r2, #0]
 8002fb6:	e7d9      	b.n	8002f6c <sniprintf+0x18>
 8002fb8:	2000000c 	.word	0x2000000c

08002fbc <_strtol_l.isra.0>:
 8002fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	001e      	movs	r6, r3
 8002fc2:	9005      	str	r0, [sp, #20]
 8002fc4:	9101      	str	r1, [sp, #4]
 8002fc6:	9202      	str	r2, [sp, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d045      	beq.n	8003058 <_strtol_l.isra.0+0x9c>
 8002fcc:	0008      	movs	r0, r1
 8002fce:	2b24      	cmp	r3, #36	; 0x24
 8002fd0:	d842      	bhi.n	8003058 <_strtol_l.isra.0+0x9c>
 8002fd2:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <_strtol_l.isra.0+0x114>)
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	469c      	mov	ip, r3
 8002fd8:	0003      	movs	r3, r0
 8002fda:	4661      	mov	r1, ip
 8002fdc:	781c      	ldrb	r4, [r3, #0]
 8002fde:	1c45      	adds	r5, r0, #1
 8002fe0:	5d09      	ldrb	r1, [r1, r4]
 8002fe2:	0028      	movs	r0, r5
 8002fe4:	000f      	movs	r7, r1
 8002fe6:	4017      	ands	r7, r2
 8002fe8:	4211      	tst	r1, r2
 8002fea:	d1f5      	bne.n	8002fd8 <_strtol_l.isra.0+0x1c>
 8002fec:	2c2d      	cmp	r4, #45	; 0x2d
 8002fee:	d13a      	bne.n	8003066 <_strtol_l.isra.0+0xaa>
 8002ff0:	2701      	movs	r7, #1
 8002ff2:	782c      	ldrb	r4, [r5, #0]
 8002ff4:	1c9d      	adds	r5, r3, #2
 8002ff6:	2e00      	cmp	r6, #0
 8002ff8:	d065      	beq.n	80030c6 <_strtol_l.isra.0+0x10a>
 8002ffa:	2e10      	cmp	r6, #16
 8002ffc:	d109      	bne.n	8003012 <_strtol_l.isra.0+0x56>
 8002ffe:	2c30      	cmp	r4, #48	; 0x30
 8003000:	d107      	bne.n	8003012 <_strtol_l.isra.0+0x56>
 8003002:	2220      	movs	r2, #32
 8003004:	782b      	ldrb	r3, [r5, #0]
 8003006:	4393      	bics	r3, r2
 8003008:	2b58      	cmp	r3, #88	; 0x58
 800300a:	d157      	bne.n	80030bc <_strtol_l.isra.0+0x100>
 800300c:	2610      	movs	r6, #16
 800300e:	786c      	ldrb	r4, [r5, #1]
 8003010:	3502      	adds	r5, #2
 8003012:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <_strtol_l.isra.0+0x118>)
 8003014:	0031      	movs	r1, r6
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	0018      	movs	r0, r3
 800301a:	9303      	str	r3, [sp, #12]
 800301c:	f7fd f904 	bl	8000228 <__aeabi_uidivmod>
 8003020:	2300      	movs	r3, #0
 8003022:	2201      	movs	r2, #1
 8003024:	4684      	mov	ip, r0
 8003026:	0018      	movs	r0, r3
 8003028:	9104      	str	r1, [sp, #16]
 800302a:	4252      	negs	r2, r2
 800302c:	0021      	movs	r1, r4
 800302e:	3930      	subs	r1, #48	; 0x30
 8003030:	2909      	cmp	r1, #9
 8003032:	d81d      	bhi.n	8003070 <_strtol_l.isra.0+0xb4>
 8003034:	000c      	movs	r4, r1
 8003036:	42a6      	cmp	r6, r4
 8003038:	dd28      	ble.n	800308c <_strtol_l.isra.0+0xd0>
 800303a:	2b00      	cmp	r3, #0
 800303c:	db24      	blt.n	8003088 <_strtol_l.isra.0+0xcc>
 800303e:	0013      	movs	r3, r2
 8003040:	4584      	cmp	ip, r0
 8003042:	d306      	bcc.n	8003052 <_strtol_l.isra.0+0x96>
 8003044:	d102      	bne.n	800304c <_strtol_l.isra.0+0x90>
 8003046:	9904      	ldr	r1, [sp, #16]
 8003048:	42a1      	cmp	r1, r4
 800304a:	db02      	blt.n	8003052 <_strtol_l.isra.0+0x96>
 800304c:	2301      	movs	r3, #1
 800304e:	4370      	muls	r0, r6
 8003050:	1820      	adds	r0, r4, r0
 8003052:	782c      	ldrb	r4, [r5, #0]
 8003054:	3501      	adds	r5, #1
 8003056:	e7e9      	b.n	800302c <_strtol_l.isra.0+0x70>
 8003058:	f7ff ff4a 	bl	8002ef0 <__errno>
 800305c:	2316      	movs	r3, #22
 800305e:	6003      	str	r3, [r0, #0]
 8003060:	2000      	movs	r0, #0
 8003062:	b007      	add	sp, #28
 8003064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003066:	2c2b      	cmp	r4, #43	; 0x2b
 8003068:	d1c5      	bne.n	8002ff6 <_strtol_l.isra.0+0x3a>
 800306a:	782c      	ldrb	r4, [r5, #0]
 800306c:	1c9d      	adds	r5, r3, #2
 800306e:	e7c2      	b.n	8002ff6 <_strtol_l.isra.0+0x3a>
 8003070:	0021      	movs	r1, r4
 8003072:	3941      	subs	r1, #65	; 0x41
 8003074:	2919      	cmp	r1, #25
 8003076:	d801      	bhi.n	800307c <_strtol_l.isra.0+0xc0>
 8003078:	3c37      	subs	r4, #55	; 0x37
 800307a:	e7dc      	b.n	8003036 <_strtol_l.isra.0+0x7a>
 800307c:	0021      	movs	r1, r4
 800307e:	3961      	subs	r1, #97	; 0x61
 8003080:	2919      	cmp	r1, #25
 8003082:	d803      	bhi.n	800308c <_strtol_l.isra.0+0xd0>
 8003084:	3c57      	subs	r4, #87	; 0x57
 8003086:	e7d6      	b.n	8003036 <_strtol_l.isra.0+0x7a>
 8003088:	0013      	movs	r3, r2
 800308a:	e7e2      	b.n	8003052 <_strtol_l.isra.0+0x96>
 800308c:	2b00      	cmp	r3, #0
 800308e:	da09      	bge.n	80030a4 <_strtol_l.isra.0+0xe8>
 8003090:	2322      	movs	r3, #34	; 0x22
 8003092:	9a05      	ldr	r2, [sp, #20]
 8003094:	9803      	ldr	r0, [sp, #12]
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0e1      	beq.n	8003062 <_strtol_l.isra.0+0xa6>
 800309e:	1e6b      	subs	r3, r5, #1
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	e007      	b.n	80030b4 <_strtol_l.isra.0+0xf8>
 80030a4:	2f00      	cmp	r7, #0
 80030a6:	d000      	beq.n	80030aa <_strtol_l.isra.0+0xee>
 80030a8:	4240      	negs	r0, r0
 80030aa:	9a02      	ldr	r2, [sp, #8]
 80030ac:	2a00      	cmp	r2, #0
 80030ae:	d0d8      	beq.n	8003062 <_strtol_l.isra.0+0xa6>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f4      	bne.n	800309e <_strtol_l.isra.0+0xe2>
 80030b4:	9b02      	ldr	r3, [sp, #8]
 80030b6:	9a01      	ldr	r2, [sp, #4]
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e7d2      	b.n	8003062 <_strtol_l.isra.0+0xa6>
 80030bc:	2430      	movs	r4, #48	; 0x30
 80030be:	2e00      	cmp	r6, #0
 80030c0:	d1a7      	bne.n	8003012 <_strtol_l.isra.0+0x56>
 80030c2:	3608      	adds	r6, #8
 80030c4:	e7a5      	b.n	8003012 <_strtol_l.isra.0+0x56>
 80030c6:	2c30      	cmp	r4, #48	; 0x30
 80030c8:	d09b      	beq.n	8003002 <_strtol_l.isra.0+0x46>
 80030ca:	260a      	movs	r6, #10
 80030cc:	e7a1      	b.n	8003012 <_strtol_l.isra.0+0x56>
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	08003ca2 	.word	0x08003ca2
 80030d4:	7fffffff 	.word	0x7fffffff

080030d8 <strtol>:
 80030d8:	b510      	push	{r4, lr}
 80030da:	0013      	movs	r3, r2
 80030dc:	000a      	movs	r2, r1
 80030de:	0001      	movs	r1, r0
 80030e0:	4802      	ldr	r0, [pc, #8]	; (80030ec <strtol+0x14>)
 80030e2:	6800      	ldr	r0, [r0, #0]
 80030e4:	f7ff ff6a 	bl	8002fbc <_strtol_l.isra.0>
 80030e8:	bd10      	pop	{r4, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	2000000c 	.word	0x2000000c

080030f0 <__ssputs_r>:
 80030f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f2:	688e      	ldr	r6, [r1, #8]
 80030f4:	b085      	sub	sp, #20
 80030f6:	0007      	movs	r7, r0
 80030f8:	000c      	movs	r4, r1
 80030fa:	9203      	str	r2, [sp, #12]
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	429e      	cmp	r6, r3
 8003100:	d83c      	bhi.n	800317c <__ssputs_r+0x8c>
 8003102:	2390      	movs	r3, #144	; 0x90
 8003104:	898a      	ldrh	r2, [r1, #12]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	421a      	tst	r2, r3
 800310a:	d034      	beq.n	8003176 <__ssputs_r+0x86>
 800310c:	2503      	movs	r5, #3
 800310e:	6909      	ldr	r1, [r1, #16]
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	1a5b      	subs	r3, r3, r1
 8003114:	9302      	str	r3, [sp, #8]
 8003116:	6963      	ldr	r3, [r4, #20]
 8003118:	9802      	ldr	r0, [sp, #8]
 800311a:	435d      	muls	r5, r3
 800311c:	0feb      	lsrs	r3, r5, #31
 800311e:	195d      	adds	r5, r3, r5
 8003120:	9b01      	ldr	r3, [sp, #4]
 8003122:	106d      	asrs	r5, r5, #1
 8003124:	3301      	adds	r3, #1
 8003126:	181b      	adds	r3, r3, r0
 8003128:	42ab      	cmp	r3, r5
 800312a:	d900      	bls.n	800312e <__ssputs_r+0x3e>
 800312c:	001d      	movs	r5, r3
 800312e:	0553      	lsls	r3, r2, #21
 8003130:	d532      	bpl.n	8003198 <__ssputs_r+0xa8>
 8003132:	0029      	movs	r1, r5
 8003134:	0038      	movs	r0, r7
 8003136:	f000 fb31 	bl	800379c <_malloc_r>
 800313a:	1e06      	subs	r6, r0, #0
 800313c:	d109      	bne.n	8003152 <__ssputs_r+0x62>
 800313e:	230c      	movs	r3, #12
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	2340      	movs	r3, #64	; 0x40
 8003144:	2001      	movs	r0, #1
 8003146:	89a2      	ldrh	r2, [r4, #12]
 8003148:	4240      	negs	r0, r0
 800314a:	4313      	orrs	r3, r2
 800314c:	81a3      	strh	r3, [r4, #12]
 800314e:	b005      	add	sp, #20
 8003150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003152:	9a02      	ldr	r2, [sp, #8]
 8003154:	6921      	ldr	r1, [r4, #16]
 8003156:	f000 faba 	bl	80036ce <memcpy>
 800315a:	89a3      	ldrh	r3, [r4, #12]
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <__ssputs_r+0xc0>)
 800315e:	401a      	ands	r2, r3
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	4313      	orrs	r3, r2
 8003164:	81a3      	strh	r3, [r4, #12]
 8003166:	9b02      	ldr	r3, [sp, #8]
 8003168:	6126      	str	r6, [r4, #16]
 800316a:	18f6      	adds	r6, r6, r3
 800316c:	6026      	str	r6, [r4, #0]
 800316e:	6165      	str	r5, [r4, #20]
 8003170:	9e01      	ldr	r6, [sp, #4]
 8003172:	1aed      	subs	r5, r5, r3
 8003174:	60a5      	str	r5, [r4, #8]
 8003176:	9b01      	ldr	r3, [sp, #4]
 8003178:	429e      	cmp	r6, r3
 800317a:	d900      	bls.n	800317e <__ssputs_r+0x8e>
 800317c:	9e01      	ldr	r6, [sp, #4]
 800317e:	0032      	movs	r2, r6
 8003180:	9903      	ldr	r1, [sp, #12]
 8003182:	6820      	ldr	r0, [r4, #0]
 8003184:	f000 faac 	bl	80036e0 <memmove>
 8003188:	68a3      	ldr	r3, [r4, #8]
 800318a:	2000      	movs	r0, #0
 800318c:	1b9b      	subs	r3, r3, r6
 800318e:	60a3      	str	r3, [r4, #8]
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	199e      	adds	r6, r3, r6
 8003194:	6026      	str	r6, [r4, #0]
 8003196:	e7da      	b.n	800314e <__ssputs_r+0x5e>
 8003198:	002a      	movs	r2, r5
 800319a:	0038      	movs	r0, r7
 800319c:	f000 fb5c 	bl	8003858 <_realloc_r>
 80031a0:	1e06      	subs	r6, r0, #0
 80031a2:	d1e0      	bne.n	8003166 <__ssputs_r+0x76>
 80031a4:	0038      	movs	r0, r7
 80031a6:	6921      	ldr	r1, [r4, #16]
 80031a8:	f000 faae 	bl	8003708 <_free_r>
 80031ac:	e7c7      	b.n	800313e <__ssputs_r+0x4e>
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	fffffb7f 	.word	0xfffffb7f

080031b4 <_svfiprintf_r>:
 80031b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b6:	b0a1      	sub	sp, #132	; 0x84
 80031b8:	9003      	str	r0, [sp, #12]
 80031ba:	001d      	movs	r5, r3
 80031bc:	898b      	ldrh	r3, [r1, #12]
 80031be:	000f      	movs	r7, r1
 80031c0:	0016      	movs	r6, r2
 80031c2:	061b      	lsls	r3, r3, #24
 80031c4:	d511      	bpl.n	80031ea <_svfiprintf_r+0x36>
 80031c6:	690b      	ldr	r3, [r1, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10e      	bne.n	80031ea <_svfiprintf_r+0x36>
 80031cc:	2140      	movs	r1, #64	; 0x40
 80031ce:	f000 fae5 	bl	800379c <_malloc_r>
 80031d2:	6038      	str	r0, [r7, #0]
 80031d4:	6138      	str	r0, [r7, #16]
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d105      	bne.n	80031e6 <_svfiprintf_r+0x32>
 80031da:	230c      	movs	r3, #12
 80031dc:	9a03      	ldr	r2, [sp, #12]
 80031de:	3801      	subs	r0, #1
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	b021      	add	sp, #132	; 0x84
 80031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e6:	2340      	movs	r3, #64	; 0x40
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	2300      	movs	r3, #0
 80031ec:	ac08      	add	r4, sp, #32
 80031ee:	6163      	str	r3, [r4, #20]
 80031f0:	3320      	adds	r3, #32
 80031f2:	7663      	strb	r3, [r4, #25]
 80031f4:	3310      	adds	r3, #16
 80031f6:	76a3      	strb	r3, [r4, #26]
 80031f8:	9507      	str	r5, [sp, #28]
 80031fa:	0035      	movs	r5, r6
 80031fc:	782b      	ldrb	r3, [r5, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <_svfiprintf_r+0x52>
 8003202:	2b25      	cmp	r3, #37	; 0x25
 8003204:	d147      	bne.n	8003296 <_svfiprintf_r+0xe2>
 8003206:	1bab      	subs	r3, r5, r6
 8003208:	9305      	str	r3, [sp, #20]
 800320a:	42b5      	cmp	r5, r6
 800320c:	d00c      	beq.n	8003228 <_svfiprintf_r+0x74>
 800320e:	0032      	movs	r2, r6
 8003210:	0039      	movs	r1, r7
 8003212:	9803      	ldr	r0, [sp, #12]
 8003214:	f7ff ff6c 	bl	80030f0 <__ssputs_r>
 8003218:	1c43      	adds	r3, r0, #1
 800321a:	d100      	bne.n	800321e <_svfiprintf_r+0x6a>
 800321c:	e0ae      	b.n	800337c <_svfiprintf_r+0x1c8>
 800321e:	6962      	ldr	r2, [r4, #20]
 8003220:	9b05      	ldr	r3, [sp, #20]
 8003222:	4694      	mov	ip, r2
 8003224:	4463      	add	r3, ip
 8003226:	6163      	str	r3, [r4, #20]
 8003228:	782b      	ldrb	r3, [r5, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d100      	bne.n	8003230 <_svfiprintf_r+0x7c>
 800322e:	e0a5      	b.n	800337c <_svfiprintf_r+0x1c8>
 8003230:	2201      	movs	r2, #1
 8003232:	2300      	movs	r3, #0
 8003234:	4252      	negs	r2, r2
 8003236:	6062      	str	r2, [r4, #4]
 8003238:	a904      	add	r1, sp, #16
 800323a:	3254      	adds	r2, #84	; 0x54
 800323c:	1852      	adds	r2, r2, r1
 800323e:	1c6e      	adds	r6, r5, #1
 8003240:	6023      	str	r3, [r4, #0]
 8003242:	60e3      	str	r3, [r4, #12]
 8003244:	60a3      	str	r3, [r4, #8]
 8003246:	7013      	strb	r3, [r2, #0]
 8003248:	65a3      	str	r3, [r4, #88]	; 0x58
 800324a:	2205      	movs	r2, #5
 800324c:	7831      	ldrb	r1, [r6, #0]
 800324e:	4854      	ldr	r0, [pc, #336]	; (80033a0 <_svfiprintf_r+0x1ec>)
 8003250:	f000 fa32 	bl	80036b8 <memchr>
 8003254:	1c75      	adds	r5, r6, #1
 8003256:	2800      	cmp	r0, #0
 8003258:	d11f      	bne.n	800329a <_svfiprintf_r+0xe6>
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	06d3      	lsls	r3, r2, #27
 800325e:	d504      	bpl.n	800326a <_svfiprintf_r+0xb6>
 8003260:	2353      	movs	r3, #83	; 0x53
 8003262:	a904      	add	r1, sp, #16
 8003264:	185b      	adds	r3, r3, r1
 8003266:	2120      	movs	r1, #32
 8003268:	7019      	strb	r1, [r3, #0]
 800326a:	0713      	lsls	r3, r2, #28
 800326c:	d504      	bpl.n	8003278 <_svfiprintf_r+0xc4>
 800326e:	2353      	movs	r3, #83	; 0x53
 8003270:	a904      	add	r1, sp, #16
 8003272:	185b      	adds	r3, r3, r1
 8003274:	212b      	movs	r1, #43	; 0x2b
 8003276:	7019      	strb	r1, [r3, #0]
 8003278:	7833      	ldrb	r3, [r6, #0]
 800327a:	2b2a      	cmp	r3, #42	; 0x2a
 800327c:	d016      	beq.n	80032ac <_svfiprintf_r+0xf8>
 800327e:	0035      	movs	r5, r6
 8003280:	2100      	movs	r1, #0
 8003282:	200a      	movs	r0, #10
 8003284:	68e3      	ldr	r3, [r4, #12]
 8003286:	782a      	ldrb	r2, [r5, #0]
 8003288:	1c6e      	adds	r6, r5, #1
 800328a:	3a30      	subs	r2, #48	; 0x30
 800328c:	2a09      	cmp	r2, #9
 800328e:	d94e      	bls.n	800332e <_svfiprintf_r+0x17a>
 8003290:	2900      	cmp	r1, #0
 8003292:	d111      	bne.n	80032b8 <_svfiprintf_r+0x104>
 8003294:	e017      	b.n	80032c6 <_svfiprintf_r+0x112>
 8003296:	3501      	adds	r5, #1
 8003298:	e7b0      	b.n	80031fc <_svfiprintf_r+0x48>
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <_svfiprintf_r+0x1ec>)
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	1ac0      	subs	r0, r0, r3
 80032a0:	2301      	movs	r3, #1
 80032a2:	4083      	lsls	r3, r0
 80032a4:	4313      	orrs	r3, r2
 80032a6:	002e      	movs	r6, r5
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	e7ce      	b.n	800324a <_svfiprintf_r+0x96>
 80032ac:	9b07      	ldr	r3, [sp, #28]
 80032ae:	1d19      	adds	r1, r3, #4
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	9107      	str	r1, [sp, #28]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db01      	blt.n	80032bc <_svfiprintf_r+0x108>
 80032b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80032ba:	e004      	b.n	80032c6 <_svfiprintf_r+0x112>
 80032bc:	425b      	negs	r3, r3
 80032be:	60e3      	str	r3, [r4, #12]
 80032c0:	2302      	movs	r3, #2
 80032c2:	4313      	orrs	r3, r2
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	782b      	ldrb	r3, [r5, #0]
 80032c8:	2b2e      	cmp	r3, #46	; 0x2e
 80032ca:	d10a      	bne.n	80032e2 <_svfiprintf_r+0x12e>
 80032cc:	786b      	ldrb	r3, [r5, #1]
 80032ce:	2b2a      	cmp	r3, #42	; 0x2a
 80032d0:	d135      	bne.n	800333e <_svfiprintf_r+0x18a>
 80032d2:	9b07      	ldr	r3, [sp, #28]
 80032d4:	3502      	adds	r5, #2
 80032d6:	1d1a      	adds	r2, r3, #4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	9207      	str	r2, [sp, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db2b      	blt.n	8003338 <_svfiprintf_r+0x184>
 80032e0:	9309      	str	r3, [sp, #36]	; 0x24
 80032e2:	4e30      	ldr	r6, [pc, #192]	; (80033a4 <_svfiprintf_r+0x1f0>)
 80032e4:	2203      	movs	r2, #3
 80032e6:	0030      	movs	r0, r6
 80032e8:	7829      	ldrb	r1, [r5, #0]
 80032ea:	f000 f9e5 	bl	80036b8 <memchr>
 80032ee:	2800      	cmp	r0, #0
 80032f0:	d006      	beq.n	8003300 <_svfiprintf_r+0x14c>
 80032f2:	2340      	movs	r3, #64	; 0x40
 80032f4:	1b80      	subs	r0, r0, r6
 80032f6:	4083      	lsls	r3, r0
 80032f8:	6822      	ldr	r2, [r4, #0]
 80032fa:	3501      	adds	r5, #1
 80032fc:	4313      	orrs	r3, r2
 80032fe:	6023      	str	r3, [r4, #0]
 8003300:	7829      	ldrb	r1, [r5, #0]
 8003302:	2206      	movs	r2, #6
 8003304:	4828      	ldr	r0, [pc, #160]	; (80033a8 <_svfiprintf_r+0x1f4>)
 8003306:	1c6e      	adds	r6, r5, #1
 8003308:	7621      	strb	r1, [r4, #24]
 800330a:	f000 f9d5 	bl	80036b8 <memchr>
 800330e:	2800      	cmp	r0, #0
 8003310:	d03c      	beq.n	800338c <_svfiprintf_r+0x1d8>
 8003312:	4b26      	ldr	r3, [pc, #152]	; (80033ac <_svfiprintf_r+0x1f8>)
 8003314:	2b00      	cmp	r3, #0
 8003316:	d125      	bne.n	8003364 <_svfiprintf_r+0x1b0>
 8003318:	2207      	movs	r2, #7
 800331a:	9b07      	ldr	r3, [sp, #28]
 800331c:	3307      	adds	r3, #7
 800331e:	4393      	bics	r3, r2
 8003320:	3308      	adds	r3, #8
 8003322:	9307      	str	r3, [sp, #28]
 8003324:	6963      	ldr	r3, [r4, #20]
 8003326:	9a04      	ldr	r2, [sp, #16]
 8003328:	189b      	adds	r3, r3, r2
 800332a:	6163      	str	r3, [r4, #20]
 800332c:	e765      	b.n	80031fa <_svfiprintf_r+0x46>
 800332e:	4343      	muls	r3, r0
 8003330:	0035      	movs	r5, r6
 8003332:	2101      	movs	r1, #1
 8003334:	189b      	adds	r3, r3, r2
 8003336:	e7a6      	b.n	8003286 <_svfiprintf_r+0xd2>
 8003338:	2301      	movs	r3, #1
 800333a:	425b      	negs	r3, r3
 800333c:	e7d0      	b.n	80032e0 <_svfiprintf_r+0x12c>
 800333e:	2300      	movs	r3, #0
 8003340:	200a      	movs	r0, #10
 8003342:	001a      	movs	r2, r3
 8003344:	3501      	adds	r5, #1
 8003346:	6063      	str	r3, [r4, #4]
 8003348:	7829      	ldrb	r1, [r5, #0]
 800334a:	1c6e      	adds	r6, r5, #1
 800334c:	3930      	subs	r1, #48	; 0x30
 800334e:	2909      	cmp	r1, #9
 8003350:	d903      	bls.n	800335a <_svfiprintf_r+0x1a6>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0c5      	beq.n	80032e2 <_svfiprintf_r+0x12e>
 8003356:	9209      	str	r2, [sp, #36]	; 0x24
 8003358:	e7c3      	b.n	80032e2 <_svfiprintf_r+0x12e>
 800335a:	4342      	muls	r2, r0
 800335c:	0035      	movs	r5, r6
 800335e:	2301      	movs	r3, #1
 8003360:	1852      	adds	r2, r2, r1
 8003362:	e7f1      	b.n	8003348 <_svfiprintf_r+0x194>
 8003364:	ab07      	add	r3, sp, #28
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	003a      	movs	r2, r7
 800336a:	0021      	movs	r1, r4
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <_svfiprintf_r+0x1fc>)
 800336e:	9803      	ldr	r0, [sp, #12]
 8003370:	e000      	b.n	8003374 <_svfiprintf_r+0x1c0>
 8003372:	bf00      	nop
 8003374:	9004      	str	r0, [sp, #16]
 8003376:	9b04      	ldr	r3, [sp, #16]
 8003378:	3301      	adds	r3, #1
 800337a:	d1d3      	bne.n	8003324 <_svfiprintf_r+0x170>
 800337c:	89bb      	ldrh	r3, [r7, #12]
 800337e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003380:	065b      	lsls	r3, r3, #25
 8003382:	d400      	bmi.n	8003386 <_svfiprintf_r+0x1d2>
 8003384:	e72d      	b.n	80031e2 <_svfiprintf_r+0x2e>
 8003386:	2001      	movs	r0, #1
 8003388:	4240      	negs	r0, r0
 800338a:	e72a      	b.n	80031e2 <_svfiprintf_r+0x2e>
 800338c:	ab07      	add	r3, sp, #28
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	003a      	movs	r2, r7
 8003392:	0021      	movs	r1, r4
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <_svfiprintf_r+0x1fc>)
 8003396:	9803      	ldr	r0, [sp, #12]
 8003398:	f000 f87c 	bl	8003494 <_printf_i>
 800339c:	e7ea      	b.n	8003374 <_svfiprintf_r+0x1c0>
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	08003da2 	.word	0x08003da2
 80033a4:	08003da8 	.word	0x08003da8
 80033a8:	08003dac 	.word	0x08003dac
 80033ac:	00000000 	.word	0x00000000
 80033b0:	080030f1 	.word	0x080030f1

080033b4 <_printf_common>:
 80033b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b6:	0015      	movs	r5, r2
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	688a      	ldr	r2, [r1, #8]
 80033bc:	690b      	ldr	r3, [r1, #16]
 80033be:	000c      	movs	r4, r1
 80033c0:	9000      	str	r0, [sp, #0]
 80033c2:	4293      	cmp	r3, r2
 80033c4:	da00      	bge.n	80033c8 <_printf_common+0x14>
 80033c6:	0013      	movs	r3, r2
 80033c8:	0022      	movs	r2, r4
 80033ca:	602b      	str	r3, [r5, #0]
 80033cc:	3243      	adds	r2, #67	; 0x43
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	2a00      	cmp	r2, #0
 80033d2:	d001      	beq.n	80033d8 <_printf_common+0x24>
 80033d4:	3301      	adds	r3, #1
 80033d6:	602b      	str	r3, [r5, #0]
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	069b      	lsls	r3, r3, #26
 80033dc:	d502      	bpl.n	80033e4 <_printf_common+0x30>
 80033de:	682b      	ldr	r3, [r5, #0]
 80033e0:	3302      	adds	r3, #2
 80033e2:	602b      	str	r3, [r5, #0]
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	2306      	movs	r3, #6
 80033e8:	0017      	movs	r7, r2
 80033ea:	401f      	ands	r7, r3
 80033ec:	421a      	tst	r2, r3
 80033ee:	d027      	beq.n	8003440 <_printf_common+0x8c>
 80033f0:	0023      	movs	r3, r4
 80033f2:	3343      	adds	r3, #67	; 0x43
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	1e5a      	subs	r2, r3, #1
 80033f8:	4193      	sbcs	r3, r2
 80033fa:	6822      	ldr	r2, [r4, #0]
 80033fc:	0692      	lsls	r2, r2, #26
 80033fe:	d430      	bmi.n	8003462 <_printf_common+0xae>
 8003400:	0022      	movs	r2, r4
 8003402:	9901      	ldr	r1, [sp, #4]
 8003404:	9800      	ldr	r0, [sp, #0]
 8003406:	9e08      	ldr	r6, [sp, #32]
 8003408:	3243      	adds	r2, #67	; 0x43
 800340a:	47b0      	blx	r6
 800340c:	1c43      	adds	r3, r0, #1
 800340e:	d025      	beq.n	800345c <_printf_common+0xa8>
 8003410:	2306      	movs	r3, #6
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	682a      	ldr	r2, [r5, #0]
 8003416:	68e1      	ldr	r1, [r4, #12]
 8003418:	2500      	movs	r5, #0
 800341a:	4003      	ands	r3, r0
 800341c:	2b04      	cmp	r3, #4
 800341e:	d103      	bne.n	8003428 <_printf_common+0x74>
 8003420:	1a8d      	subs	r5, r1, r2
 8003422:	43eb      	mvns	r3, r5
 8003424:	17db      	asrs	r3, r3, #31
 8003426:	401d      	ands	r5, r3
 8003428:	68a3      	ldr	r3, [r4, #8]
 800342a:	6922      	ldr	r2, [r4, #16]
 800342c:	4293      	cmp	r3, r2
 800342e:	dd01      	ble.n	8003434 <_printf_common+0x80>
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	18ed      	adds	r5, r5, r3
 8003434:	2700      	movs	r7, #0
 8003436:	42bd      	cmp	r5, r7
 8003438:	d120      	bne.n	800347c <_printf_common+0xc8>
 800343a:	2000      	movs	r0, #0
 800343c:	e010      	b.n	8003460 <_printf_common+0xac>
 800343e:	3701      	adds	r7, #1
 8003440:	68e3      	ldr	r3, [r4, #12]
 8003442:	682a      	ldr	r2, [r5, #0]
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	42bb      	cmp	r3, r7
 8003448:	ddd2      	ble.n	80033f0 <_printf_common+0x3c>
 800344a:	0022      	movs	r2, r4
 800344c:	2301      	movs	r3, #1
 800344e:	9901      	ldr	r1, [sp, #4]
 8003450:	9800      	ldr	r0, [sp, #0]
 8003452:	9e08      	ldr	r6, [sp, #32]
 8003454:	3219      	adds	r2, #25
 8003456:	47b0      	blx	r6
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	d1f0      	bne.n	800343e <_printf_common+0x8a>
 800345c:	2001      	movs	r0, #1
 800345e:	4240      	negs	r0, r0
 8003460:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003462:	2030      	movs	r0, #48	; 0x30
 8003464:	18e1      	adds	r1, r4, r3
 8003466:	3143      	adds	r1, #67	; 0x43
 8003468:	7008      	strb	r0, [r1, #0]
 800346a:	0021      	movs	r1, r4
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	3145      	adds	r1, #69	; 0x45
 8003470:	7809      	ldrb	r1, [r1, #0]
 8003472:	18a2      	adds	r2, r4, r2
 8003474:	3243      	adds	r2, #67	; 0x43
 8003476:	3302      	adds	r3, #2
 8003478:	7011      	strb	r1, [r2, #0]
 800347a:	e7c1      	b.n	8003400 <_printf_common+0x4c>
 800347c:	0022      	movs	r2, r4
 800347e:	2301      	movs	r3, #1
 8003480:	9901      	ldr	r1, [sp, #4]
 8003482:	9800      	ldr	r0, [sp, #0]
 8003484:	9e08      	ldr	r6, [sp, #32]
 8003486:	321a      	adds	r2, #26
 8003488:	47b0      	blx	r6
 800348a:	1c43      	adds	r3, r0, #1
 800348c:	d0e6      	beq.n	800345c <_printf_common+0xa8>
 800348e:	3701      	adds	r7, #1
 8003490:	e7d1      	b.n	8003436 <_printf_common+0x82>
	...

08003494 <_printf_i>:
 8003494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003496:	b08b      	sub	sp, #44	; 0x2c
 8003498:	9206      	str	r2, [sp, #24]
 800349a:	000a      	movs	r2, r1
 800349c:	3243      	adds	r2, #67	; 0x43
 800349e:	9307      	str	r3, [sp, #28]
 80034a0:	9005      	str	r0, [sp, #20]
 80034a2:	9204      	str	r2, [sp, #16]
 80034a4:	7e0a      	ldrb	r2, [r1, #24]
 80034a6:	000c      	movs	r4, r1
 80034a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034aa:	2a78      	cmp	r2, #120	; 0x78
 80034ac:	d806      	bhi.n	80034bc <_printf_i+0x28>
 80034ae:	2a62      	cmp	r2, #98	; 0x62
 80034b0:	d808      	bhi.n	80034c4 <_printf_i+0x30>
 80034b2:	2a00      	cmp	r2, #0
 80034b4:	d100      	bne.n	80034b8 <_printf_i+0x24>
 80034b6:	e0c0      	b.n	800363a <_printf_i+0x1a6>
 80034b8:	2a58      	cmp	r2, #88	; 0x58
 80034ba:	d052      	beq.n	8003562 <_printf_i+0xce>
 80034bc:	0026      	movs	r6, r4
 80034be:	3642      	adds	r6, #66	; 0x42
 80034c0:	7032      	strb	r2, [r6, #0]
 80034c2:	e022      	b.n	800350a <_printf_i+0x76>
 80034c4:	0010      	movs	r0, r2
 80034c6:	3863      	subs	r0, #99	; 0x63
 80034c8:	2815      	cmp	r0, #21
 80034ca:	d8f7      	bhi.n	80034bc <_printf_i+0x28>
 80034cc:	f7fc fe1c 	bl	8000108 <__gnu_thumb1_case_shi>
 80034d0:	001f0016 	.word	0x001f0016
 80034d4:	fff6fff6 	.word	0xfff6fff6
 80034d8:	fff6fff6 	.word	0xfff6fff6
 80034dc:	fff6001f 	.word	0xfff6001f
 80034e0:	fff6fff6 	.word	0xfff6fff6
 80034e4:	00a8fff6 	.word	0x00a8fff6
 80034e8:	009a0036 	.word	0x009a0036
 80034ec:	fff6fff6 	.word	0xfff6fff6
 80034f0:	fff600b9 	.word	0xfff600b9
 80034f4:	fff60036 	.word	0xfff60036
 80034f8:	009efff6 	.word	0x009efff6
 80034fc:	0026      	movs	r6, r4
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	3642      	adds	r6, #66	; 0x42
 8003502:	1d11      	adds	r1, r2, #4
 8003504:	6019      	str	r1, [r3, #0]
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	7033      	strb	r3, [r6, #0]
 800350a:	2301      	movs	r3, #1
 800350c:	e0a7      	b.n	800365e <_printf_i+0x1ca>
 800350e:	6808      	ldr	r0, [r1, #0]
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	1d0a      	adds	r2, r1, #4
 8003514:	0605      	lsls	r5, r0, #24
 8003516:	d50b      	bpl.n	8003530 <_printf_i+0x9c>
 8003518:	680d      	ldr	r5, [r1, #0]
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	2d00      	cmp	r5, #0
 800351e:	da03      	bge.n	8003528 <_printf_i+0x94>
 8003520:	232d      	movs	r3, #45	; 0x2d
 8003522:	9a04      	ldr	r2, [sp, #16]
 8003524:	426d      	negs	r5, r5
 8003526:	7013      	strb	r3, [r2, #0]
 8003528:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <_printf_i+0x21c>)
 800352a:	270a      	movs	r7, #10
 800352c:	9303      	str	r3, [sp, #12]
 800352e:	e032      	b.n	8003596 <_printf_i+0x102>
 8003530:	680d      	ldr	r5, [r1, #0]
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	0641      	lsls	r1, r0, #25
 8003536:	d5f1      	bpl.n	800351c <_printf_i+0x88>
 8003538:	b22d      	sxth	r5, r5
 800353a:	e7ef      	b.n	800351c <_printf_i+0x88>
 800353c:	680d      	ldr	r5, [r1, #0]
 800353e:	6819      	ldr	r1, [r3, #0]
 8003540:	1d08      	adds	r0, r1, #4
 8003542:	6018      	str	r0, [r3, #0]
 8003544:	062e      	lsls	r6, r5, #24
 8003546:	d501      	bpl.n	800354c <_printf_i+0xb8>
 8003548:	680d      	ldr	r5, [r1, #0]
 800354a:	e003      	b.n	8003554 <_printf_i+0xc0>
 800354c:	066d      	lsls	r5, r5, #25
 800354e:	d5fb      	bpl.n	8003548 <_printf_i+0xb4>
 8003550:	680d      	ldr	r5, [r1, #0]
 8003552:	b2ad      	uxth	r5, r5
 8003554:	4b56      	ldr	r3, [pc, #344]	; (80036b0 <_printf_i+0x21c>)
 8003556:	270a      	movs	r7, #10
 8003558:	9303      	str	r3, [sp, #12]
 800355a:	2a6f      	cmp	r2, #111	; 0x6f
 800355c:	d117      	bne.n	800358e <_printf_i+0xfa>
 800355e:	2708      	movs	r7, #8
 8003560:	e015      	b.n	800358e <_printf_i+0xfa>
 8003562:	3145      	adds	r1, #69	; 0x45
 8003564:	700a      	strb	r2, [r1, #0]
 8003566:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <_printf_i+0x21c>)
 8003568:	9203      	str	r2, [sp, #12]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	6821      	ldr	r1, [r4, #0]
 800356e:	ca20      	ldmia	r2!, {r5}
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	0608      	lsls	r0, r1, #24
 8003574:	d550      	bpl.n	8003618 <_printf_i+0x184>
 8003576:	07cb      	lsls	r3, r1, #31
 8003578:	d502      	bpl.n	8003580 <_printf_i+0xec>
 800357a:	2320      	movs	r3, #32
 800357c:	4319      	orrs	r1, r3
 800357e:	6021      	str	r1, [r4, #0]
 8003580:	2710      	movs	r7, #16
 8003582:	2d00      	cmp	r5, #0
 8003584:	d103      	bne.n	800358e <_printf_i+0xfa>
 8003586:	2320      	movs	r3, #32
 8003588:	6822      	ldr	r2, [r4, #0]
 800358a:	439a      	bics	r2, r3
 800358c:	6022      	str	r2, [r4, #0]
 800358e:	0023      	movs	r3, r4
 8003590:	2200      	movs	r2, #0
 8003592:	3343      	adds	r3, #67	; 0x43
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	60a3      	str	r3, [r4, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	db03      	blt.n	80035a6 <_printf_i+0x112>
 800359e:	2204      	movs	r2, #4
 80035a0:	6821      	ldr	r1, [r4, #0]
 80035a2:	4391      	bics	r1, r2
 80035a4:	6021      	str	r1, [r4, #0]
 80035a6:	2d00      	cmp	r5, #0
 80035a8:	d102      	bne.n	80035b0 <_printf_i+0x11c>
 80035aa:	9e04      	ldr	r6, [sp, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00c      	beq.n	80035ca <_printf_i+0x136>
 80035b0:	9e04      	ldr	r6, [sp, #16]
 80035b2:	0028      	movs	r0, r5
 80035b4:	0039      	movs	r1, r7
 80035b6:	f7fc fe37 	bl	8000228 <__aeabi_uidivmod>
 80035ba:	9b03      	ldr	r3, [sp, #12]
 80035bc:	3e01      	subs	r6, #1
 80035be:	5c5b      	ldrb	r3, [r3, r1]
 80035c0:	7033      	strb	r3, [r6, #0]
 80035c2:	002b      	movs	r3, r5
 80035c4:	0005      	movs	r5, r0
 80035c6:	429f      	cmp	r7, r3
 80035c8:	d9f3      	bls.n	80035b2 <_printf_i+0x11e>
 80035ca:	2f08      	cmp	r7, #8
 80035cc:	d109      	bne.n	80035e2 <_printf_i+0x14e>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	07db      	lsls	r3, r3, #31
 80035d2:	d506      	bpl.n	80035e2 <_printf_i+0x14e>
 80035d4:	6863      	ldr	r3, [r4, #4]
 80035d6:	6922      	ldr	r2, [r4, #16]
 80035d8:	4293      	cmp	r3, r2
 80035da:	dc02      	bgt.n	80035e2 <_printf_i+0x14e>
 80035dc:	2330      	movs	r3, #48	; 0x30
 80035de:	3e01      	subs	r6, #1
 80035e0:	7033      	strb	r3, [r6, #0]
 80035e2:	9b04      	ldr	r3, [sp, #16]
 80035e4:	1b9b      	subs	r3, r3, r6
 80035e6:	6123      	str	r3, [r4, #16]
 80035e8:	9b07      	ldr	r3, [sp, #28]
 80035ea:	0021      	movs	r1, r4
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	9805      	ldr	r0, [sp, #20]
 80035f0:	9b06      	ldr	r3, [sp, #24]
 80035f2:	aa09      	add	r2, sp, #36	; 0x24
 80035f4:	f7ff fede 	bl	80033b4 <_printf_common>
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d135      	bne.n	8003668 <_printf_i+0x1d4>
 80035fc:	2001      	movs	r0, #1
 80035fe:	4240      	negs	r0, r0
 8003600:	b00b      	add	sp, #44	; 0x2c
 8003602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003604:	2220      	movs	r2, #32
 8003606:	6809      	ldr	r1, [r1, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	6022      	str	r2, [r4, #0]
 800360c:	0022      	movs	r2, r4
 800360e:	2178      	movs	r1, #120	; 0x78
 8003610:	3245      	adds	r2, #69	; 0x45
 8003612:	7011      	strb	r1, [r2, #0]
 8003614:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <_printf_i+0x220>)
 8003616:	e7a7      	b.n	8003568 <_printf_i+0xd4>
 8003618:	0648      	lsls	r0, r1, #25
 800361a:	d5ac      	bpl.n	8003576 <_printf_i+0xe2>
 800361c:	b2ad      	uxth	r5, r5
 800361e:	e7aa      	b.n	8003576 <_printf_i+0xe2>
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	680d      	ldr	r5, [r1, #0]
 8003624:	1d10      	adds	r0, r2, #4
 8003626:	6949      	ldr	r1, [r1, #20]
 8003628:	6018      	str	r0, [r3, #0]
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	062e      	lsls	r6, r5, #24
 800362e:	d501      	bpl.n	8003634 <_printf_i+0x1a0>
 8003630:	6019      	str	r1, [r3, #0]
 8003632:	e002      	b.n	800363a <_printf_i+0x1a6>
 8003634:	066d      	lsls	r5, r5, #25
 8003636:	d5fb      	bpl.n	8003630 <_printf_i+0x19c>
 8003638:	8019      	strh	r1, [r3, #0]
 800363a:	2300      	movs	r3, #0
 800363c:	9e04      	ldr	r6, [sp, #16]
 800363e:	6123      	str	r3, [r4, #16]
 8003640:	e7d2      	b.n	80035e8 <_printf_i+0x154>
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	1d11      	adds	r1, r2, #4
 8003646:	6019      	str	r1, [r3, #0]
 8003648:	6816      	ldr	r6, [r2, #0]
 800364a:	2100      	movs	r1, #0
 800364c:	0030      	movs	r0, r6
 800364e:	6862      	ldr	r2, [r4, #4]
 8003650:	f000 f832 	bl	80036b8 <memchr>
 8003654:	2800      	cmp	r0, #0
 8003656:	d001      	beq.n	800365c <_printf_i+0x1c8>
 8003658:	1b80      	subs	r0, r0, r6
 800365a:	6060      	str	r0, [r4, #4]
 800365c:	6863      	ldr	r3, [r4, #4]
 800365e:	6123      	str	r3, [r4, #16]
 8003660:	2300      	movs	r3, #0
 8003662:	9a04      	ldr	r2, [sp, #16]
 8003664:	7013      	strb	r3, [r2, #0]
 8003666:	e7bf      	b.n	80035e8 <_printf_i+0x154>
 8003668:	6923      	ldr	r3, [r4, #16]
 800366a:	0032      	movs	r2, r6
 800366c:	9906      	ldr	r1, [sp, #24]
 800366e:	9805      	ldr	r0, [sp, #20]
 8003670:	9d07      	ldr	r5, [sp, #28]
 8003672:	47a8      	blx	r5
 8003674:	1c43      	adds	r3, r0, #1
 8003676:	d0c1      	beq.n	80035fc <_printf_i+0x168>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	079b      	lsls	r3, r3, #30
 800367c:	d415      	bmi.n	80036aa <_printf_i+0x216>
 800367e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003680:	68e0      	ldr	r0, [r4, #12]
 8003682:	4298      	cmp	r0, r3
 8003684:	dabc      	bge.n	8003600 <_printf_i+0x16c>
 8003686:	0018      	movs	r0, r3
 8003688:	e7ba      	b.n	8003600 <_printf_i+0x16c>
 800368a:	0022      	movs	r2, r4
 800368c:	2301      	movs	r3, #1
 800368e:	9906      	ldr	r1, [sp, #24]
 8003690:	9805      	ldr	r0, [sp, #20]
 8003692:	9e07      	ldr	r6, [sp, #28]
 8003694:	3219      	adds	r2, #25
 8003696:	47b0      	blx	r6
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d0af      	beq.n	80035fc <_printf_i+0x168>
 800369c:	3501      	adds	r5, #1
 800369e:	68e3      	ldr	r3, [r4, #12]
 80036a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	42ab      	cmp	r3, r5
 80036a6:	dcf0      	bgt.n	800368a <_printf_i+0x1f6>
 80036a8:	e7e9      	b.n	800367e <_printf_i+0x1ea>
 80036aa:	2500      	movs	r5, #0
 80036ac:	e7f7      	b.n	800369e <_printf_i+0x20a>
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	08003db3 	.word	0x08003db3
 80036b4:	08003dc4 	.word	0x08003dc4

080036b8 <memchr>:
 80036b8:	b2c9      	uxtb	r1, r1
 80036ba:	1882      	adds	r2, r0, r2
 80036bc:	4290      	cmp	r0, r2
 80036be:	d101      	bne.n	80036c4 <memchr+0xc>
 80036c0:	2000      	movs	r0, #0
 80036c2:	4770      	bx	lr
 80036c4:	7803      	ldrb	r3, [r0, #0]
 80036c6:	428b      	cmp	r3, r1
 80036c8:	d0fb      	beq.n	80036c2 <memchr+0xa>
 80036ca:	3001      	adds	r0, #1
 80036cc:	e7f6      	b.n	80036bc <memchr+0x4>

080036ce <memcpy>:
 80036ce:	2300      	movs	r3, #0
 80036d0:	b510      	push	{r4, lr}
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d100      	bne.n	80036d8 <memcpy+0xa>
 80036d6:	bd10      	pop	{r4, pc}
 80036d8:	5ccc      	ldrb	r4, [r1, r3]
 80036da:	54c4      	strb	r4, [r0, r3]
 80036dc:	3301      	adds	r3, #1
 80036de:	e7f8      	b.n	80036d2 <memcpy+0x4>

080036e0 <memmove>:
 80036e0:	b510      	push	{r4, lr}
 80036e2:	4288      	cmp	r0, r1
 80036e4:	d902      	bls.n	80036ec <memmove+0xc>
 80036e6:	188b      	adds	r3, r1, r2
 80036e8:	4298      	cmp	r0, r3
 80036ea:	d303      	bcc.n	80036f4 <memmove+0x14>
 80036ec:	2300      	movs	r3, #0
 80036ee:	e007      	b.n	8003700 <memmove+0x20>
 80036f0:	5c8b      	ldrb	r3, [r1, r2]
 80036f2:	5483      	strb	r3, [r0, r2]
 80036f4:	3a01      	subs	r2, #1
 80036f6:	d2fb      	bcs.n	80036f0 <memmove+0x10>
 80036f8:	bd10      	pop	{r4, pc}
 80036fa:	5ccc      	ldrb	r4, [r1, r3]
 80036fc:	54c4      	strb	r4, [r0, r3]
 80036fe:	3301      	adds	r3, #1
 8003700:	429a      	cmp	r2, r3
 8003702:	d1fa      	bne.n	80036fa <memmove+0x1a>
 8003704:	e7f8      	b.n	80036f8 <memmove+0x18>
	...

08003708 <_free_r>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	0005      	movs	r5, r0
 800370c:	2900      	cmp	r1, #0
 800370e:	d010      	beq.n	8003732 <_free_r+0x2a>
 8003710:	1f0c      	subs	r4, r1, #4
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	da00      	bge.n	800371a <_free_r+0x12>
 8003718:	18e4      	adds	r4, r4, r3
 800371a:	0028      	movs	r0, r5
 800371c:	f000 f8d4 	bl	80038c8 <__malloc_lock>
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <_free_r+0x90>)
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <_free_r+0x2c>
 8003728:	6063      	str	r3, [r4, #4]
 800372a:	6014      	str	r4, [r2, #0]
 800372c:	0028      	movs	r0, r5
 800372e:	f000 f8d3 	bl	80038d8 <__malloc_unlock>
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	42a3      	cmp	r3, r4
 8003736:	d908      	bls.n	800374a <_free_r+0x42>
 8003738:	6821      	ldr	r1, [r4, #0]
 800373a:	1860      	adds	r0, r4, r1
 800373c:	4283      	cmp	r3, r0
 800373e:	d1f3      	bne.n	8003728 <_free_r+0x20>
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	1841      	adds	r1, r0, r1
 8003746:	6021      	str	r1, [r4, #0]
 8003748:	e7ee      	b.n	8003728 <_free_r+0x20>
 800374a:	001a      	movs	r2, r3
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <_free_r+0x4e>
 8003752:	42a3      	cmp	r3, r4
 8003754:	d9f9      	bls.n	800374a <_free_r+0x42>
 8003756:	6811      	ldr	r1, [r2, #0]
 8003758:	1850      	adds	r0, r2, r1
 800375a:	42a0      	cmp	r0, r4
 800375c:	d10b      	bne.n	8003776 <_free_r+0x6e>
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	1809      	adds	r1, r1, r0
 8003762:	1850      	adds	r0, r2, r1
 8003764:	6011      	str	r1, [r2, #0]
 8003766:	4283      	cmp	r3, r0
 8003768:	d1e0      	bne.n	800372c <_free_r+0x24>
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	1841      	adds	r1, r0, r1
 8003770:	6011      	str	r1, [r2, #0]
 8003772:	6053      	str	r3, [r2, #4]
 8003774:	e7da      	b.n	800372c <_free_r+0x24>
 8003776:	42a0      	cmp	r0, r4
 8003778:	d902      	bls.n	8003780 <_free_r+0x78>
 800377a:	230c      	movs	r3, #12
 800377c:	602b      	str	r3, [r5, #0]
 800377e:	e7d5      	b.n	800372c <_free_r+0x24>
 8003780:	6821      	ldr	r1, [r4, #0]
 8003782:	1860      	adds	r0, r4, r1
 8003784:	4283      	cmp	r3, r0
 8003786:	d103      	bne.n	8003790 <_free_r+0x88>
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	1841      	adds	r1, r0, r1
 800378e:	6021      	str	r1, [r4, #0]
 8003790:	6063      	str	r3, [r4, #4]
 8003792:	6054      	str	r4, [r2, #4]
 8003794:	e7ca      	b.n	800372c <_free_r+0x24>
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	2000009c 	.word	0x2000009c

0800379c <_malloc_r>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	2303      	movs	r3, #3
 80037a0:	1ccd      	adds	r5, r1, #3
 80037a2:	439d      	bics	r5, r3
 80037a4:	3508      	adds	r5, #8
 80037a6:	0006      	movs	r6, r0
 80037a8:	2d0c      	cmp	r5, #12
 80037aa:	d21f      	bcs.n	80037ec <_malloc_r+0x50>
 80037ac:	250c      	movs	r5, #12
 80037ae:	42a9      	cmp	r1, r5
 80037b0:	d81e      	bhi.n	80037f0 <_malloc_r+0x54>
 80037b2:	0030      	movs	r0, r6
 80037b4:	f000 f888 	bl	80038c8 <__malloc_lock>
 80037b8:	4925      	ldr	r1, [pc, #148]	; (8003850 <_malloc_r+0xb4>)
 80037ba:	680a      	ldr	r2, [r1, #0]
 80037bc:	0014      	movs	r4, r2
 80037be:	2c00      	cmp	r4, #0
 80037c0:	d11a      	bne.n	80037f8 <_malloc_r+0x5c>
 80037c2:	4f24      	ldr	r7, [pc, #144]	; (8003854 <_malloc_r+0xb8>)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d104      	bne.n	80037d4 <_malloc_r+0x38>
 80037ca:	0021      	movs	r1, r4
 80037cc:	0030      	movs	r0, r6
 80037ce:	f000 f869 	bl	80038a4 <_sbrk_r>
 80037d2:	6038      	str	r0, [r7, #0]
 80037d4:	0029      	movs	r1, r5
 80037d6:	0030      	movs	r0, r6
 80037d8:	f000 f864 	bl	80038a4 <_sbrk_r>
 80037dc:	1c43      	adds	r3, r0, #1
 80037de:	d12b      	bne.n	8003838 <_malloc_r+0x9c>
 80037e0:	230c      	movs	r3, #12
 80037e2:	0030      	movs	r0, r6
 80037e4:	6033      	str	r3, [r6, #0]
 80037e6:	f000 f877 	bl	80038d8 <__malloc_unlock>
 80037ea:	e003      	b.n	80037f4 <_malloc_r+0x58>
 80037ec:	2d00      	cmp	r5, #0
 80037ee:	dade      	bge.n	80037ae <_malloc_r+0x12>
 80037f0:	230c      	movs	r3, #12
 80037f2:	6033      	str	r3, [r6, #0]
 80037f4:	2000      	movs	r0, #0
 80037f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	1b5b      	subs	r3, r3, r5
 80037fc:	d419      	bmi.n	8003832 <_malloc_r+0x96>
 80037fe:	2b0b      	cmp	r3, #11
 8003800:	d903      	bls.n	800380a <_malloc_r+0x6e>
 8003802:	6023      	str	r3, [r4, #0]
 8003804:	18e4      	adds	r4, r4, r3
 8003806:	6025      	str	r5, [r4, #0]
 8003808:	e003      	b.n	8003812 <_malloc_r+0x76>
 800380a:	6863      	ldr	r3, [r4, #4]
 800380c:	42a2      	cmp	r2, r4
 800380e:	d10e      	bne.n	800382e <_malloc_r+0x92>
 8003810:	600b      	str	r3, [r1, #0]
 8003812:	0030      	movs	r0, r6
 8003814:	f000 f860 	bl	80038d8 <__malloc_unlock>
 8003818:	0020      	movs	r0, r4
 800381a:	2207      	movs	r2, #7
 800381c:	300b      	adds	r0, #11
 800381e:	1d23      	adds	r3, r4, #4
 8003820:	4390      	bics	r0, r2
 8003822:	1ac2      	subs	r2, r0, r3
 8003824:	4298      	cmp	r0, r3
 8003826:	d0e6      	beq.n	80037f6 <_malloc_r+0x5a>
 8003828:	1a1b      	subs	r3, r3, r0
 800382a:	50a3      	str	r3, [r4, r2]
 800382c:	e7e3      	b.n	80037f6 <_malloc_r+0x5a>
 800382e:	6053      	str	r3, [r2, #4]
 8003830:	e7ef      	b.n	8003812 <_malloc_r+0x76>
 8003832:	0022      	movs	r2, r4
 8003834:	6864      	ldr	r4, [r4, #4]
 8003836:	e7c2      	b.n	80037be <_malloc_r+0x22>
 8003838:	2303      	movs	r3, #3
 800383a:	1cc4      	adds	r4, r0, #3
 800383c:	439c      	bics	r4, r3
 800383e:	42a0      	cmp	r0, r4
 8003840:	d0e1      	beq.n	8003806 <_malloc_r+0x6a>
 8003842:	1a21      	subs	r1, r4, r0
 8003844:	0030      	movs	r0, r6
 8003846:	f000 f82d 	bl	80038a4 <_sbrk_r>
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d1db      	bne.n	8003806 <_malloc_r+0x6a>
 800384e:	e7c7      	b.n	80037e0 <_malloc_r+0x44>
 8003850:	2000009c 	.word	0x2000009c
 8003854:	200000a0 	.word	0x200000a0

08003858 <_realloc_r>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	0007      	movs	r7, r0
 800385c:	000d      	movs	r5, r1
 800385e:	0016      	movs	r6, r2
 8003860:	2900      	cmp	r1, #0
 8003862:	d105      	bne.n	8003870 <_realloc_r+0x18>
 8003864:	0011      	movs	r1, r2
 8003866:	f7ff ff99 	bl	800379c <_malloc_r>
 800386a:	0004      	movs	r4, r0
 800386c:	0020      	movs	r0, r4
 800386e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003870:	2a00      	cmp	r2, #0
 8003872:	d103      	bne.n	800387c <_realloc_r+0x24>
 8003874:	f7ff ff48 	bl	8003708 <_free_r>
 8003878:	0034      	movs	r4, r6
 800387a:	e7f7      	b.n	800386c <_realloc_r+0x14>
 800387c:	f000 f834 	bl	80038e8 <_malloc_usable_size_r>
 8003880:	002c      	movs	r4, r5
 8003882:	42b0      	cmp	r0, r6
 8003884:	d2f2      	bcs.n	800386c <_realloc_r+0x14>
 8003886:	0031      	movs	r1, r6
 8003888:	0038      	movs	r0, r7
 800388a:	f7ff ff87 	bl	800379c <_malloc_r>
 800388e:	1e04      	subs	r4, r0, #0
 8003890:	d0ec      	beq.n	800386c <_realloc_r+0x14>
 8003892:	0029      	movs	r1, r5
 8003894:	0032      	movs	r2, r6
 8003896:	f7ff ff1a 	bl	80036ce <memcpy>
 800389a:	0029      	movs	r1, r5
 800389c:	0038      	movs	r0, r7
 800389e:	f7ff ff33 	bl	8003708 <_free_r>
 80038a2:	e7e3      	b.n	800386c <_realloc_r+0x14>

080038a4 <_sbrk_r>:
 80038a4:	2300      	movs	r3, #0
 80038a6:	b570      	push	{r4, r5, r6, lr}
 80038a8:	4d06      	ldr	r5, [pc, #24]	; (80038c4 <_sbrk_r+0x20>)
 80038aa:	0004      	movs	r4, r0
 80038ac:	0008      	movs	r0, r1
 80038ae:	602b      	str	r3, [r5, #0]
 80038b0:	f7fe fb96 	bl	8001fe0 <_sbrk>
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d103      	bne.n	80038c0 <_sbrk_r+0x1c>
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d000      	beq.n	80038c0 <_sbrk_r+0x1c>
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	200002f4 	.word	0x200002f4

080038c8 <__malloc_lock>:
 80038c8:	b510      	push	{r4, lr}
 80038ca:	4802      	ldr	r0, [pc, #8]	; (80038d4 <__malloc_lock+0xc>)
 80038cc:	f000 f814 	bl	80038f8 <__retarget_lock_acquire_recursive>
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	200002fc 	.word	0x200002fc

080038d8 <__malloc_unlock>:
 80038d8:	b510      	push	{r4, lr}
 80038da:	4802      	ldr	r0, [pc, #8]	; (80038e4 <__malloc_unlock+0xc>)
 80038dc:	f000 f80d 	bl	80038fa <__retarget_lock_release_recursive>
 80038e0:	bd10      	pop	{r4, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	200002fc 	.word	0x200002fc

080038e8 <_malloc_usable_size_r>:
 80038e8:	1f0b      	subs	r3, r1, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	1f18      	subs	r0, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	da01      	bge.n	80038f6 <_malloc_usable_size_r+0xe>
 80038f2:	580b      	ldr	r3, [r1, r0]
 80038f4:	18c0      	adds	r0, r0, r3
 80038f6:	4770      	bx	lr

080038f8 <__retarget_lock_acquire_recursive>:
 80038f8:	4770      	bx	lr

080038fa <__retarget_lock_release_recursive>:
 80038fa:	4770      	bx	lr

080038fc <_init>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr

08003908 <_fini>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr
